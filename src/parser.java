
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\007\000\002\006\006\000\002" +
    "\005\010\000\002\005\006\000\002\017\005\000\002\017" +
    "\004\000\002\017\004\000\002\017\005\000\002\017\003" +
    "\000\002\010\004\000\002\010\003\000\002\007\005\000" +
    "\002\007\004\000\002\007\003\000\002\011\005\000\002" +
    "\011\004\000\002\016\003\000\002\016\006\000\002\012" +
    "\013\000\002\012\011\000\002\012\011\000\002\012\015" +
    "\000\002\013\006\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\005\000\002" +
    "\013\005\000\002\014\005\000\002\014\003\000\002\015" +
    "\014\000\002\015\013\000\002\020\005\000\002\020\003" +
    "\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\022\004\014\015\015\021\010\024\006\025" +
    "\024\026\023\054\022\057\021\001\002\000\004\033\217" +
    "\001\002\000\030\002\uffea\004\uffea\015\uffea\017\uffea\020" +
    "\uffea\021\uffea\024\uffea\025\uffea\026\uffea\054\uffea\057\uffea" +
    "\001\002\000\004\043\211\001\002\000\004\002\210\001" +
    "\002\000\004\054\176\001\002\000\024\002\ufffb\004\ufffb" +
    "\015\ufffb\021\ufffb\024\ufffb\025\ufffb\026\ufffb\054\ufffb\057" +
    "\ufffb\001\002\000\024\002\001\004\014\015\015\021\010" +
    "\024\006\025\024\026\023\054\022\057\021\001\002\000" +
    "\004\053\174\001\002\000\004\054\167\001\002\000\004" +
    "\043\156\001\002\000\024\002\ufffc\004\ufffc\015\ufffc\021" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\054\ufffc\057\ufffc\001\002" +
    "\000\004\053\155\001\002\000\024\002\ufffe\004\ufffe\015" +
    "\ufffe\021\ufffe\024\ufffe\025\ufffe\026\ufffe\054\ufffe\057\ufffe" +
    "\001\002\000\022\012\100\013\102\042\105\043\107\045" +
    "\106\054\104\055\077\056\103\001\002\000\006\033\uffe7" +
    "\045\145\001\002\000\022\012\100\013\102\042\105\043" +
    "\107\045\106\054\104\055\077\056\103\001\002\000\004" +
    "\054\025\001\002\000\004\043\026\001\002\000\006\044" +
    "\030\054\031\001\002\000\006\044\067\047\066\001\002" +
    "\000\004\052\057\001\002\000\004\052\033\001\002\000" +
    "\006\044\uffc8\047\uffc8\001\002\000\014\005\037\006\040" +
    "\007\035\010\041\011\034\001\002\000\004\014\046\001" +
    "\002\000\016\004\ufff8\014\ufff8\020\ufff8\044\ufff8\047\ufff8" +
    "\053\ufff8\001\002\000\006\044\uffc7\047\uffc7\001\002\000" +
    "\016\004\ufffa\014\ufffa\020\ufffa\044\ufffa\047\ufffa\053\ufffa" +
    "\001\002\000\016\004\ufff9\014\ufff9\020\ufff9\044\ufff9\047" +
    "\ufff9\053\ufff9\001\002\000\004\045\042\001\002\000\004" +
    "\055\043\001\002\000\004\046\044\001\002\000\014\005" +
    "\037\006\040\007\035\010\041\011\034\001\002\000\016" +
    "\004\ufff7\014\ufff7\020\ufff7\044\ufff7\047\ufff7\053\ufff7\001" +
    "\002\000\004\004\014\001\002\000\012\004\uffef\020\uffef" +
    "\047\uffef\053\056\001\002\000\010\004\014\020\053\047" +
    "\051\001\002\000\004\004\014\001\002\000\012\004\ufff1" +
    "\020\ufff1\047\ufff1\053\054\001\002\000\016\004\ufff6\014" +
    "\ufff6\020\ufff6\044\ufff6\047\ufff6\053\ufff6\001\002\000\010" +
    "\004\ufff3\020\ufff3\047\ufff3\001\002\000\010\004\ufff0\020" +
    "\ufff0\047\ufff0\001\002\000\010\004\ufff2\020\ufff2\047\ufff2" +
    "\001\002\000\014\005\037\006\040\007\035\010\041\011" +
    "\034\001\002\000\004\014\061\001\002\000\016\015\015" +
    "\021\010\024\006\026\023\054\022\057\021\001\002\000" +
    "\022\015\uffed\017\uffed\020\uffed\021\uffed\024\uffed\026\uffed" +
    "\054\uffed\057\uffed\001\002\000\020\015\015\020\065\021" +
    "\010\024\006\026\023\054\022\057\021\001\002\000\022" +
    "\015\uffee\017\uffee\020\uffee\021\uffee\024\uffee\026\uffee\054" +
    "\uffee\057\uffee\001\002\000\024\002\uffca\004\uffca\015\uffca" +
    "\021\uffca\024\uffca\025\uffca\026\uffca\054\uffca\057\uffca\001" +
    "\002\000\004\054\031\001\002\000\004\052\070\001\002" +
    "\000\014\005\037\006\040\007\035\010\041\011\034\001" +
    "\002\000\004\014\072\001\002\000\016\015\015\021\010" +
    "\024\006\026\023\054\022\057\021\001\002\000\020\015" +
    "\015\020\074\021\010\024\006\026\023\054\022\057\021" +
    "\001\002\000\024\002\uffcb\004\uffcb\015\uffcb\021\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\054\uffcb\057\uffcb\001\002\000\006" +
    "\044\uffc9\047\uffc9\001\002\000\044\004\uffd0\020\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\044\uffd0\046\uffd0\047\uffd0\051" +
    "\uffd0\053\uffd0\001\002\000\044\004\uffd2\020\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\044\uffd2\046\uffd2\047\uffd2\051\uffd2" +
    "\053\uffd2\001\002\000\044\004\uffd4\020\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\044\uffd4\046\uffd4\047\uffd4\051\uffd4\053" +
    "\uffd4\001\002\000\030\027\120\030\111\031\115\032\114" +
    "\034\117\035\122\036\116\037\112\040\123\041\113\053" +
    "\uffe8\001\002\000\044\004\uffd3\020\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\044\uffd3\046\uffd3\047\uffd3\051\uffd3\053\uffd3" +
    "\001\002\000\044\004\uffd1\020\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\044\uffd1\046\uffd1\047\uffd1\051\uffd1\053\uffd1\001" +
    "\002\000\050\004\uffe7\020\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\043\144\044\uffe7\045\145\046\uffe7\047\uffe7\051\uffe7" +
    "\053\uffe7\001\002\000\022\012\100\013\102\042\105\043" +
    "\107\045\106\054\104\055\077\056\103\001\002\000\022" +
    "\012\100\013\102\042\105\043\107\045\106\054\104\055" +
    "\077\056\103\001\002\000\022\012\100\013\102\042\105" +
    "\043\107\045\106\054\104\055\077\056\103\001\002\000" +
    "\030\027\120\030\111\031\115\032\114\034\117\035\122" +
    "\036\116\037\112\040\123\041\113\044\121\001\002\000" +
    "\022\012\100\013\102\042\105\043\107\045\106\054\104" +
    "\055\077\056\103\001\002\000\022\012\100\013\102\042" +
    "\105\043\107\045\106\054\104\055\077\056\103\001\002" +
    "\000\022\012\100\013\102\042\105\043\107\045\106\054" +
    "\104\055\077\056\103\001\002\000\022\012\100\013\102" +
    "\042\105\043\107\045\106\054\104\055\077\056\103\001" +
    "\002\000\022\012\100\013\102\042\105\043\107\045\106" +
    "\054\104\055\077\056\103\001\002\000\022\012\100\013" +
    "\102\042\105\043\107\045\106\054\104\055\077\056\103" +
    "\001\002\000\022\012\100\013\102\042\105\043\107\045" +
    "\106\054\104\055\077\056\103\001\002\000\022\012\100" +
    "\013\102\042\105\043\107\045\106\054\104\055\077\056" +
    "\103\001\002\000\044\004\uffcf\020\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\044\uffcf\046\uffcf\047\uffcf\051\uffcf\053\uffcf" +
    "\001\002\000\022\012\100\013\102\042\105\043\107\045" +
    "\106\054\104\055\077\056\103\001\002\000\022\012\100" +
    "\013\102\042\105\043\107\045\106\054\104\055\077\056" +
    "\103\001\002\000\044\004\uffdc\020\uffdc\027\120\030\111" +
    "\031\115\032\114\034\117\035\122\036\116\037\uffdc\040" +
    "\uffdc\041\uffdc\044\uffdc\046\uffdc\047\uffdc\051\uffdc\053\uffdc" +
    "\001\002\000\044\004\uffd7\020\uffd7\027\120\030\111\031" +
    "\115\032\114\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\044\uffd7\046\uffd7\047\uffd7\051\uffd7\053\uffd7\001" +
    "\002\000\044\004\uffdf\020\uffdf\027\uffdf\030\uffdf\031\115" +
    "\032\114\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\044\uffdf\046\uffdf\047\uffdf\051\uffdf\053\uffdf\001\002" +
    "\000\044\004\uffd8\020\uffd8\027\120\030\111\031\115\032" +
    "\114\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\044\uffd8\046\uffd8\047\uffd8\051\uffd8\053\uffd8\001\002\000" +
    "\044\004\uffd6\020\uffd6\027\120\030\111\031\115\032\114" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\044" +
    "\uffd6\046\uffd6\047\uffd6\051\uffd6\053\uffd6\001\002\000\044" +
    "\004\uffda\020\uffda\027\uffda\030\uffda\031\uffda\032\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\044\uffda" +
    "\046\uffda\047\uffda\051\uffda\053\uffda\001\002\000\044\004" +
    "\uffd9\020\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\044\uffd9\046" +
    "\uffd9\047\uffd9\051\uffd9\053\uffd9\001\002\000\044\004\uffdb" +
    "\020\uffdb\027\120\030\111\031\115\032\114\034\117\035" +
    "\122\036\116\037\uffdb\040\uffdb\041\uffdb\044\uffdb\046\uffdb" +
    "\047\uffdb\051\uffdb\053\uffdb\001\002\000\044\004\uffdd\020" +
    "\uffdd\027\120\030\111\031\115\032\114\034\117\035\122" +
    "\036\116\037\uffdd\040\uffdd\041\uffdd\044\uffdd\046\uffdd\047" +
    "\uffdd\051\uffdd\053\uffdd\001\002\000\044\004\uffde\020\uffde" +
    "\027\uffde\030\uffde\031\115\032\114\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\044\uffde\046\uffde\047\uffde" +
    "\051\uffde\053\uffde\001\002\000\006\046\141\047\140\001" +
    "\002\000\034\027\120\030\111\031\115\032\114\034\117" +
    "\035\122\036\116\037\112\040\123\041\113\044\uffcc\046" +
    "\uffcc\047\uffcc\001\002\000\022\012\100\013\102\042\105" +
    "\043\107\045\106\054\104\055\077\056\103\001\002\000" +
    "\044\004\uffce\020\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\044" +
    "\uffce\046\uffce\047\uffce\051\uffce\053\uffce\001\002\000\034" +
    "\027\120\030\111\031\115\032\114\034\117\035\122\036" +
    "\116\037\112\040\123\041\113\044\uffcd\046\uffcd\047\uffcd" +
    "\001\002\000\044\004\uffd5\020\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\044\uffd5\046\uffd5\047\uffd5\051\uffd5\053\uffd5\001" +
    "\002\000\024\012\100\013\102\042\105\043\107\044\151" +
    "\045\106\054\104\055\077\056\103\001\002\000\022\012" +
    "\100\013\102\042\105\043\107\045\106\054\104\055\077" +
    "\056\103\001\002\000\030\027\120\030\111\031\115\032" +
    "\114\034\117\035\122\036\116\037\112\040\123\041\113" +
    "\046\147\001\002\000\046\004\uffe6\020\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\044\uffe6\046\uffe6\047\uffe6\051" +
    "\uffe6\053\uffe6\001\002\000\006\044\152\047\140\001\002" +
    "\000\044\004\uffe0\020\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\044\uffe0\046\uffe0\047\uffe0\051\uffe0\053\uffe0\001\002\000" +
    "\044\004\uffe1\020\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\044" +
    "\uffe1\046\uffe1\047\uffe1\051\uffe1\053\uffe1\001\002\000\030" +
    "\027\120\030\111\031\115\032\114\034\117\035\122\036" +
    "\116\037\112\040\123\041\113\053\154\001\002\000\030" +
    "\002\uffec\004\uffec\015\uffec\017\uffec\020\uffec\021\uffec\024" +
    "\uffec\025\uffec\026\uffec\054\uffec\057\uffec\001\002\000\030" +
    "\002\uffeb\004\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\054\uffeb\057\uffeb\001\002\000\022" +
    "\012\100\013\102\042\105\043\107\045\106\054\104\055" +
    "\077\056\103\001\002\000\030\027\120\030\111\031\115" +
    "\032\114\034\117\035\122\036\116\037\112\040\123\041" +
    "\113\044\160\001\002\000\004\016\161\001\002\000\016" +
    "\015\015\021\010\024\006\026\023\054\022\057\021\001" +
    "\002\000\022\015\015\017\163\020\164\021\010\024\006" +
    "\026\023\054\022\057\021\001\002\000\016\015\015\021" +
    "\010\024\006\026\023\054\022\057\021\001\002\000\030" +
    "\002\uffe4\004\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\054\uffe4\057\uffe4\001\002\000\020" +
    "\015\015\020\166\021\010\024\006\026\023\054\022\057" +
    "\021\001\002\000\030\002\uffe5\004\uffe5\015\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\024\uffe5\025\uffe5\026\uffe5\054\uffe5\057" +
    "\uffe5\001\002\000\004\052\170\001\002\000\014\005\037" +
    "\006\040\007\035\010\041\011\034\001\002\000\014\004" +
    "\ufff4\014\172\020\ufff4\047\ufff4\053\ufff4\001\002\000\022" +
    "\012\100\013\102\042\105\043\107\045\106\054\104\055" +
    "\077\056\103\001\002\000\036\004\ufff5\020\ufff5\027\120" +
    "\030\111\031\115\032\114\034\117\035\122\036\116\037" +
    "\112\040\123\041\113\047\ufff5\053\ufff5\001\002\000\024" +
    "\002\ufffd\004\ufffd\015\ufffd\021\ufffd\024\ufffd\025\ufffd\026" +
    "\ufffd\054\ufffd\057\ufffd\001\002\000\024\002\uffff\004\uffff" +
    "\015\uffff\021\uffff\024\uffff\025\uffff\026\uffff\054\uffff\057" +
    "\uffff\001\002\000\004\022\177\001\002\000\004\045\200" +
    "\001\002\000\022\012\100\013\102\042\105\043\107\045" +
    "\106\054\104\055\077\056\103\001\002\000\030\027\120" +
    "\030\111\031\115\032\114\034\117\035\122\036\116\037" +
    "\112\040\123\041\113\051\202\001\002\000\022\012\100" +
    "\013\102\042\105\043\107\045\106\054\104\055\077\056" +
    "\103\001\002\000\030\027\120\030\111\031\115\032\114" +
    "\034\117\035\122\036\116\037\112\040\123\041\113\046" +
    "\204\001\002\000\004\023\205\001\002\000\016\015\015" +
    "\021\010\024\006\026\023\054\022\057\021\001\002\000" +
    "\020\015\015\020\207\021\010\024\006\026\023\054\022" +
    "\057\021\001\002\000\030\002\uffe2\004\uffe2\015\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\024\uffe2\025\uffe2\026\uffe2\054\uffe2" +
    "\057\uffe2\001\002\000\004\002\000\001\002\000\022\012" +
    "\100\013\102\042\105\043\107\045\106\054\104\055\077" +
    "\056\103\001\002\000\030\027\120\030\111\031\115\032" +
    "\114\034\117\035\122\036\116\037\112\040\123\041\113" +
    "\044\213\001\002\000\004\023\214\001\002\000\016\015" +
    "\015\021\010\024\006\026\023\054\022\057\021\001\002" +
    "\000\020\015\015\020\216\021\010\024\006\026\023\054" +
    "\022\057\021\001\002\000\030\002\uffe3\004\uffe3\015\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\024\uffe3\025\uffe3\026\uffe3\054" +
    "\uffe3\057\uffe3\001\002\000\022\012\100\013\102\042\105" +
    "\043\107\045\106\054\104\055\077\056\103\001\002\000" +
    "\030\027\120\030\111\031\115\032\114\034\117\035\122" +
    "\036\116\037\112\040\123\041\113\053\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\024\002\006\003\011\004\017\005\012\007" +
    "\015\011\016\012\004\015\010\016\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\174" +
    "\005\012\007\015\011\016\012\004\015\010\016\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\152\016\075\001\001\000\002\001\001\000\006" +
    "\013\100\016\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\026\021\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\044\001\001\000\002\001\001\000\006\005\046\017" +
    "\047\001\001\000\002\001\001\000\004\005\051\001\001" +
    "\000\004\005\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\057\001\001\000\002\001\001\000\014\007" +
    "\061\010\062\011\016\012\004\016\003\001\001\000\002" +
    "\001\001\000\012\007\063\011\016\012\004\016\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\074" +
    "\001\001\000\002\001\001\000\004\006\070\001\001\000" +
    "\002\001\001\000\014\007\061\010\072\011\016\012\004" +
    "\016\003\001\001\000\012\007\063\011\016\012\004\016" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\142\016\075\001\001\000\010\013\136\014" +
    "\135\016\075\001\001\000\006\013\107\016\075\001\001" +
    "\000\002\001\001\000\006\013\134\016\075\001\001\000" +
    "\006\013\133\016\075\001\001\000\006\013\132\016\075" +
    "\001\001\000\006\013\131\016\075\001\001\000\006\013" +
    "\130\016\075\001\001\000\006\013\127\016\075\001\001" +
    "\000\006\013\126\016\075\001\001\000\006\013\125\016" +
    "\075\001\001\000\002\001\001\000\006\013\124\016\075" +
    "\001\001\000\006\013\123\016\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\141\016\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\136\014\147\016\075\001\001\000\006\013" +
    "\145\016\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\156\016\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\061\010\161\011\016\012\004\016\003" +
    "\001\001\000\012\007\063\011\016\012\004\016\003\001" +
    "\001\000\014\007\061\010\164\011\016\012\004\016\003" +
    "\001\001\000\002\001\001\000\012\007\063\011\016\012" +
    "\004\016\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\170\001\001\000\002\001\001\000\006\013" +
    "\172\016\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\200\016\075\001\001\000\002\001\001\000\006" +
    "\013\202\016\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\061\010\205\011\016\012\004\016\003" +
    "\001\001\000\012\007\063\011\016\012\004\016\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\211" +
    "\016\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\061\010\214\011\016\012\004\016\003\001\001" +
    "\000\012\007\063\011\016\012\004\016\003\001\001\000" +
    "\002\001\001\000\006\013\217\016\075\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ProgramElements 
            { parser.Tree.reduce(1,"Program",0);
              ProgramNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ASTNode> e = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramElements ::= ProgramElements ProgramElement 
            { parser.Tree.reduce(2,"ProgramElements",1);
              List<ASTNode> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ASTNode> e1 = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramElements",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramElements ::= ProgramElement 
            { parser.Tree.reduce(1,"ProgramElements",1);
              List<ASTNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramElements",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgramElement ::= Declaration SEMICOLON 
            { parser.Tree.reduce(2,"ProgramElement",0);
              ASTNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationNode d = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramElement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramElement ::= Statement 
            { parser.Tree.reduce(1,"ProgramElement",0);
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramElement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgramElement ::= Function 
            { parser.Tree.reduce(1,"ProgramElement",0);
              ASTNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionNode f = (FunctionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramElement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INTEGER_TYPE 
            { parser.Tree.reduce(1,"Type",0);
              TypeNode RESULT =null;
		 RESULT = new IntegerTypeNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= BOOLEAN_TYPE 
            { parser.Tree.reduce(1,"Type",0);
              TypeNode RESULT =null;
		 RESULT = new BooleanTypeNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= REAL_TYPE 
            { parser.Tree.reduce(1,"Type",0);
              TypeNode RESULT =null;
		 RESULT = new RealTypeNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= ARRAY LBRACKET NUMBER RBRACKET Type 
            { parser.Tree.reduce(5,"Type",0);
              TypeNode RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elementTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elementTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeNode elementType = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayTypeNode(size, elementType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= RECORD IS DeclarationList END 
            { parser.Tree.reduce(4,"Type",0);
              TypeNode RESULT =null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<DeclarationNode> fields = (List<DeclarationNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordTypeNode(fields); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaration ::= VAR IDENTIFIER COLON Type IS Expression 
            { parser.Tree.reduce(6,"Declaration",0);
              DeclarationNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeNode type = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclarationNode(id, type, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaration ::= VAR IDENTIFIER COLON Type 
            { parser.Tree.reduce(4,"Declaration",0);
              DeclarationNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeNode type = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclarationNode(id, type, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DeclarationList ::= DeclarationList Declaration SEMICOLON 
            { parser.Tree.reduce(3,"DeclarationList",0);
              List<DeclarationNode> RESULT =null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<DeclarationNode> fields = (List<DeclarationNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationNode d = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 fields.add(d); RESULT = fields; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DeclarationList ::= Declaration SEMICOLON 
            { parser.Tree.reduce(2,"DeclarationList",0);
              List<DeclarationNode> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationNode d = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayList<>(Arrays.asList(d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DeclarationList ::= DeclarationList Declaration 
            { parser.Tree.reduce(2,"DeclarationList",0);
              List<DeclarationNode> RESULT =null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<DeclarationNode> fields = (List<DeclarationNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationNode d = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fields.add(d); RESULT = fields; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DeclarationList ::= DeclarationList COMMA Declaration 
            { parser.Tree.reduce(3,"DeclarationList",0);
              List<DeclarationNode> RESULT =null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<DeclarationNode> fields = (List<DeclarationNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationNode d = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fields.add(d); RESULT = fields; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DeclarationList ::= Declaration 
            { parser.Tree.reduce(1,"DeclarationList",0);
              List<DeclarationNode> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationNode d = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StatementBlock ::= StatementBlock Statement 
            { parser.Tree.reduce(2,"StatementBlock",0);
              StatementBlockNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBlockNode s1 = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementNode s2 = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s1.getStatements().add(s2); RESULT = s1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementBlock",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StatementBlock ::= Statement 
            { parser.Tree.reduce(1,"StatementBlock",0);
              StatementBlockNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatementBlockNode(new ArrayList<>(Arrays.asList(s))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementBlock",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= PRINT Expression SEMICOLON 
            { parser.Tree.reduce(3,"Statement",0);
              StatementNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PrintNode(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= SimpleStatement SEMICOLON 
            { parser.Tree.reduce(2,"Statement",0);
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= CompoundStatement 
            { parser.Tree.reduce(1,"Statement",0);
              StatementNode RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementNode cs = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SimpleStatement ::= Variable ASSIGN Expression 
            { parser.Tree.reduce(3,"SimpleStatement",0);
              StatementNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode s1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignmentNode(s1, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SimpleStatement ::= RETURN Expression 
            { parser.Tree.reduce(2,"SimpleStatement",0);
              StatementNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnNode(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Variable ::= IDENTIFIER 
            { parser.Tree.reduce(1,"Variable",0);
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Variable ::= IDENTIFIER LBRACKET Expression RBRACKET 
            { parser.Tree.reduce(4,"Variable",0);
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode index = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAccessNode(new IdentifierNode(id), index); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CompoundStatement ::= IF LPAREN Expression RPAREN THEN StatementBlock ELSE StatementBlock END 
            { parser.Tree.reduce(9,"CompoundStatement",0);
              StatementNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExpressionNode cond = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int thenStmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int thenStmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementBlockNode thenStmt = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseStmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseStmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBlockNode elseStmt = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseNode(cond, thenStmt, elseStmt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompoundStatement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CompoundStatement ::= IF LPAREN Expression RPAREN THEN StatementBlock END 
            { parser.Tree.reduce(7,"CompoundStatement",0);
              StatementNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode cond = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int thenStmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int thenStmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBlockNode thenStmt = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseNode(cond, thenStmt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompoundStatement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CompoundStatement ::= WHILE LPAREN Expression RPAREN LOOP StatementBlock END 
            { parser.Tree.reduce(7,"CompoundStatement",0);
              StatementNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode cond = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBlockNode body = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileLoopNode(cond, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompoundStatement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CompoundStatement ::= FOR IDENTIFIER IN LBRACKET Expression RANGE Expression RBRACKET LOOP StatementBlock END 
            { parser.Tree.reduce(11,"CompoundStatement",0);
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExpressionNode start = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode end = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBlockNode body = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ForLoopNode(new IdentifierNode(id), start, end, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompoundStatement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= IDENTIFIER LPAREN ExpressionList RPAREN 
            { parser.Tree.reduce(4,"Expression",0);
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ExpressionNode> args = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCallNode(id, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= IDENTIFIER LPAREN RPAREN 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunctionCallNode(id, new ArrayList<>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression PLUS Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression MINUS Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression AND Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "AND"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression OR Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "OR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression XOR Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "XOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Expression MULTIPLY Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Expression DIVIDE Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= Expression EQUAL Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Expression GREATER_THAN Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, ">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= Expression LESS_THAN Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= NOT Expression 
            { parser.Tree.reduce(2,"Expression",0);
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOpNode(expr, "NOT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= TRUE 
            { parser.Tree.reduce(1,"Expression",0);
              ExpressionNode RESULT =null;
		 RESULT = new BooleanNode(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= FALSE 
            { parser.Tree.reduce(1,"Expression",0);
              ExpressionNode RESULT =null;
		 RESULT = new BooleanNode(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= NUMBER 
            { parser.Tree.reduce(1,"Expression",0);
              ExpressionNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumberNode(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= REAL 
            { parser.Tree.reduce(1,"Expression",0);
              ExpressionNode RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double real = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RealNode(real); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expression ::= Variable 
            { parser.Tree.reduce(1,"Expression",0);
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expression ::= LPAREN Expression RPAREN 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expression ::= LBRACKET ExpressionList RBRACKET 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ExpressionNode> list = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpressionListNode(list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpressionList ::= ExpressionList COMMA Expression 
            { parser.Tree.reduce(3,"ExpressionList",0);
              List<ExpressionNode> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ExpressionNode> el = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 el.add(expr); RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpressionList ::= Expression 
            { parser.Tree.reduce(1,"ExpressionList",0);
              List<ExpressionNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Function ::= ROUTINE IDENTIFIER LPAREN ParameterList RPAREN COLON Type IS StatementBlock END 
            { parser.Tree.reduce(10,"Function",0);
              FunctionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		List<DeclarationNode> params = (List<DeclarationNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeNode returnType = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBlockNode body = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionNode(id, params, returnType, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Function ::= ROUTINE IDENTIFIER LPAREN RPAREN COLON Type IS StatementBlock END 
            { parser.Tree.reduce(9,"Function",0);
              FunctionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeNode returnType = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBlockNode body = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionNode(id, new ArrayList<>(), returnType, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ParameterList ::= ParameterList COMMA Parameter 
            { parser.Tree.reduce(3,"ParameterList",0);
              List<DeclarationNode> RESULT =null;
		int plistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<DeclarationNode> plist = (List<DeclarationNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationNode param = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 plist.add(param); RESULT = plist; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ParameterList ::= Parameter 
            { parser.Tree.reduce(1,"ParameterList",0);
              List<DeclarationNode> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationNode param = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(param)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Parameter ::= IDENTIFIER COLON Type 
            { parser.Tree.reduce(3,"Parameter",0);
              DeclarationNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeNode type = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclarationNode(id, type, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameter",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
