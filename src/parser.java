
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\007\000\002\006\005\000\002\025" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\007\000" +
    "\002\005\010\000\002\005\006\000\002\017\005\000\002" +
    "\017\004\000\002\017\004\000\002\017\005\000\002\017" +
    "\003\000\002\010\004\000\002\010\003\000\002\007\005" +
    "\000\002\007\004\000\002\007\003\000\002\011\005\000" +
    "\002\011\004\000\002\016\005\000\002\016\006\000\002" +
    "\016\003\000\002\012\013\000\002\012\011\000\002\012" +
    "\011\000\002\012\015\000\002\013\003\000\002\013\006" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\004\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\005\000\002\013\005\000\002\014\005\000\002\014" +
    "\003\000\002\015\014\000\002\015\013\000\002\020\005" +
    "\000\002\020\003\000\002\021\005\000\002\022\004\000" +
    "\002\024\004\000\002\024\003\000\002\023\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\024\004\025\015\013\021\022\024\004\025" +
    "\005\026\010\057\011\062\017\065\014\001\002\000\004" +
    "\045\251\001\002\000\004\057\224\001\002\000\004\055" +
    "\223\001\002\000\026\002\001\004\025\015\013\021\022" +
    "\024\004\025\005\026\010\057\011\062\017\065\014\001" +
    "\002\000\024\012\050\013\053\044\056\045\057\047\060" +
    "\057\055\060\047\061\054\064\051\001\002\000\010\033" +
    "\uffdb\047\uffdb\052\uffdb\001\002\000\026\002\ufffa\004\ufffa" +
    "\015\ufffa\021\ufffa\024\ufffa\025\ufffa\026\ufffa\057\ufffa\062" +
    "\ufffa\065\ufffa\001\002\000\004\045\210\001\002\000\004" +
    "\057\164\001\002\000\026\002\ufffd\004\ufffd\015\ufffd\021" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\057\ufffd\062\ufffd\065\ufffd" +
    "\001\002\000\026\002\ufffe\004\ufffe\015\ufffe\021\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\057\ufffe\062\ufffe\065\ufffe\001\002" +
    "\000\024\012\050\013\053\044\056\045\057\047\060\057" +
    "\055\060\047\061\054\064\051\001\002\000\010\033\160" +
    "\047\125\052\126\001\002\000\026\002\ufffb\004\ufffb\015" +
    "\ufffb\021\ufffb\024\ufffb\025\ufffb\026\ufffb\057\ufffb\062\ufffb" +
    "\065\ufffb\001\002\000\004\057\144\001\002\000\004\055" +
    "\143\001\002\000\004\002\142\001\002\000\004\057\027" +
    "\001\002\000\032\002\uffe0\004\uffe0\015\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\024\uffe0\025\uffe0\026\uffe0\057\uffe0\062\uffe0" +
    "\065\uffe0\001\002\000\004\054\030\001\002\000\020\005" +
    "\035\006\037\007\032\010\040\011\031\057\036\063\033" +
    "\001\002\000\004\004\025\001\002\000\016\004\ufff6\014" +
    "\ufff6\020\ufff6\046\ufff6\051\ufff6\055\ufff6\001\002\000\016" +
    "\004\ufff5\014\ufff5\020\ufff5\046\ufff5\051\ufff5\055\ufff5\001" +
    "\002\000\014\004\uffea\014\045\020\uffea\051\uffea\055\uffea" +
    "\001\002\000\016\004\ufff8\014\ufff8\020\ufff8\046\ufff8\051" +
    "\ufff8\055\ufff8\001\002\000\016\004\ufff9\014\ufff9\020\ufff9" +
    "\046\ufff9\051\ufff9\055\ufff9\001\002\000\016\004\ufff7\014" +
    "\ufff7\020\ufff7\046\ufff7\051\ufff7\055\ufff7\001\002\000\004" +
    "\047\041\001\002\000\004\060\042\001\002\000\004\050" +
    "\043\001\002\000\020\005\035\006\037\007\032\010\040" +
    "\011\031\057\036\063\033\001\002\000\016\004\ufff4\014" +
    "\ufff4\020\ufff4\046\ufff4\051\ufff4\055\ufff4\001\002\000\024" +
    "\012\050\013\053\044\056\045\057\047\060\057\055\060" +
    "\047\061\054\064\051\001\002\000\054\004\uffc2\020\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\046\uffc2" +
    "\047\125\050\uffc2\051\uffc2\052\126\053\uffc2\055\uffc2\001" +
    "\002\000\050\004\uffc4\020\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\046\uffc4\050\uffc4\051\uffc4\053\uffc4" +
    "\055\uffc4\001\002\000\050\004\uffc6\020\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\046\uffc6\050\uffc6\051" +
    "\uffc6\053\uffc6\055\uffc6\001\002\000\050\004\uffd6\020\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\046\uffd6" +
    "\050\uffd6\051\uffd6\053\uffd6\055\uffd6\001\002\000\042\004" +
    "\uffeb\020\uffeb\027\073\030\063\031\070\032\067\034\072" +
    "\035\075\036\071\037\066\040\074\041\064\042\076\043" +
    "\065\051\uffeb\055\uffeb\001\002\000\050\004\uffc5\020\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\046\uffc5" +
    "\050\uffc5\051\uffc5\053\uffc5\055\uffc5\001\002\000\050\004" +
    "\uffc3\020\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\046\uffc3\050\uffc3\051\uffc3\053\uffc3\055\uffc3\001\002" +
    "\000\056\004\uffdb\020\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\045\121\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\055\uffdb\001\002\000\024\012\050" +
    "\013\053\044\056\045\057\047\060\057\055\060\047\061" +
    "\054\064\051\001\002\000\024\012\050\013\053\044\056" +
    "\045\057\047\060\057\055\060\047\061\054\064\051\001" +
    "\002\000\024\012\050\013\053\044\056\045\057\047\060" +
    "\057\055\060\047\061\054\064\051\001\002\000\006\050" +
    "\114\051\113\001\002\000\040\027\073\030\063\031\070" +
    "\032\067\034\072\035\075\036\071\037\066\040\074\041" +
    "\064\042\076\043\065\046\uffbe\050\uffbe\051\uffbe\001\002" +
    "\000\024\012\050\013\053\044\056\045\057\047\060\057" +
    "\055\060\047\061\054\064\051\001\002\000\024\012\050" +
    "\013\053\044\056\045\057\047\060\057\055\060\047\061" +
    "\054\064\051\001\002\000\024\012\050\013\053\044\056" +
    "\045\057\047\060\057\055\060\047\061\054\064\051\001" +
    "\002\000\024\012\050\013\053\044\056\045\057\047\060" +
    "\057\055\060\047\061\054\064\051\001\002\000\024\012" +
    "\050\013\053\044\056\045\057\047\060\057\055\060\047" +
    "\061\054\064\051\001\002\000\024\012\050\013\053\044" +
    "\056\045\057\047\060\057\055\060\047\061\054\064\051" +
    "\001\002\000\024\012\050\013\053\044\056\045\057\047" +
    "\060\057\055\060\047\061\054\064\051\001\002\000\024" +
    "\012\050\013\053\044\056\045\057\047\060\057\055\060" +
    "\047\061\054\064\051\001\002\000\024\012\050\013\053" +
    "\044\056\045\057\047\060\057\055\060\047\061\054\064" +
    "\051\001\002\000\024\012\050\013\053\044\056\045\057" +
    "\047\060\057\055\060\047\061\054\064\051\001\002\000" +
    "\024\012\050\013\053\044\056\045\057\047\060\057\055" +
    "\060\047\061\054\064\051\001\002\000\024\012\050\013" +
    "\053\044\056\045\057\047\060\057\055\060\047\061\054" +
    "\064\051\001\002\000\050\004\uffd0\020\uffd0\027\073\030" +
    "\063\031\070\032\067\034\072\035\075\036\071\037\066" +
    "\040\074\041\uffd0\042\uffd0\043\uffd0\046\uffd0\050\uffd0\051" +
    "\uffd0\053\uffd0\055\uffd0\001\002\000\050\004\uffcb\020\uffcb" +
    "\027\073\030\063\031\070\032\067\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\046\uffcb" +
    "\050\uffcb\051\uffcb\053\uffcb\055\uffcb\001\002\000\050\004" +
    "\uffc9\020\uffc9\027\073\030\063\031\070\032\067\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\046\uffc9\050\uffc9\051\uffc9\053\uffc9\055\uffc9\001\002" +
    "\000\050\004\uffd3\020\uffd3\027\uffd3\030\uffd3\031\070\032" +
    "\067\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\046\uffd3\050\uffd3\051\uffd3\053\uffd3\055" +
    "\uffd3\001\002\000\050\004\uffcc\020\uffcc\027\073\030\063" +
    "\031\070\032\067\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\046\uffcc\050\uffcc\051\uffcc" +
    "\053\uffcc\055\uffcc\001\002\000\050\004\uffca\020\uffca\027" +
    "\073\030\063\031\070\032\067\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\046\uffca\050" +
    "\uffca\051\uffca\053\uffca\055\uffca\001\002\000\050\004\uffce" +
    "\020\uffce\027\uffce\030\uffce\031\uffce\032\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\046\uffce\050\uffce\051\uffce\053\uffce\055\uffce\001\002\000" +
    "\050\004\uffcd\020\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\046\uffcd\050\uffcd\051\uffcd\053\uffcd\055\uffcd" +
    "\001\002\000\050\004\uffc8\020\uffc8\027\073\030\063\031" +
    "\070\032\067\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\046\uffc8\050\uffc8\051\uffc8\053" +
    "\uffc8\055\uffc8\001\002\000\050\004\uffcf\020\uffcf\027\073" +
    "\030\063\031\070\032\067\034\072\035\075\036\071\037" +
    "\066\040\074\041\uffcf\042\uffcf\043\uffcf\046\uffcf\050\uffcf" +
    "\051\uffcf\053\uffcf\055\uffcf\001\002\000\050\004\uffd1\020" +
    "\uffd1\027\073\030\063\031\070\032\067\034\072\035\075" +
    "\036\071\037\066\040\074\041\uffd1\042\uffd1\043\uffd1\046" +
    "\uffd1\050\uffd1\051\uffd1\053\uffd1\055\uffd1\001\002\000\050" +
    "\004\uffd2\020\uffd2\027\uffd2\030\uffd2\031\070\032\067\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\046\uffd2\050\uffd2\051\uffd2\053\uffd2\055\uffd2\001" +
    "\002\000\024\012\050\013\053\044\056\045\057\047\060" +
    "\057\055\060\047\061\054\064\051\001\002\000\050\004" +
    "\uffc0\020\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\046\uffc0\050\uffc0\051\uffc0\053\uffc0\055\uffc0\001\002" +
    "\000\040\027\073\030\063\031\070\032\067\034\072\035" +
    "\075\036\071\037\066\040\074\041\064\042\076\043\065" +
    "\046\uffbf\050\uffbf\051\uffbf\001\002\000\034\027\073\030" +
    "\063\031\070\032\067\034\072\035\075\036\071\037\066" +
    "\040\074\041\064\042\076\043\065\046\117\001\002\000" +
    "\050\004\uffc1\020\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\046\uffc1\050\uffc1\051\uffc1\053\uffc1\055\uffc1" +
    "\001\002\000\050\004\uffc7\020\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\046\uffc7\050\uffc7\051\uffc7\053" +
    "\uffc7\055\uffc7\001\002\000\026\012\050\013\053\044\056" +
    "\045\057\046\123\047\060\057\055\060\047\061\054\064" +
    "\051\001\002\000\006\046\124\051\113\001\002\000\050" +
    "\004\uffd4\020\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\046\uffd4\050\uffd4\051\uffd4\053\uffd4\055\uffd4\001" +
    "\002\000\050\004\uffd5\020\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\046\uffd5\050\uffd5\051\uffd5\053\uffd5" +
    "\055\uffd5\001\002\000\024\012\050\013\053\044\056\045" +
    "\057\047\060\057\055\060\047\061\054\064\051\001\002" +
    "\000\004\057\127\001\002\000\056\004\uffdd\020\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\055\uffdd" +
    "\001\002\000\034\027\073\030\063\031\070\032\067\034" +
    "\072\035\075\036\071\037\066\040\074\041\064\042\076" +
    "\043\065\050\131\001\002\000\056\004\uffdc\020\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\046" +
    "\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\055\uffdc" +
    "\001\002\000\012\004\uffe5\020\uffe5\051\uffe5\055\141\001" +
    "\002\000\010\004\025\020\136\051\134\001\002\000\004" +
    "\004\025\001\002\000\012\004\uffe7\020\uffe7\051\uffe7\055" +
    "\137\001\002\000\016\004\ufff3\014\ufff3\020\ufff3\046\ufff3" +
    "\051\ufff3\055\ufff3\001\002\000\010\004\uffe9\020\uffe9\051" +
    "\uffe9\001\002\000\010\004\uffe6\020\uffe6\051\uffe6\001\002" +
    "\000\010\004\uffe8\020\uffe8\051\uffe8\001\002\000\004\002" +
    "\000\001\002\000\032\002\uffe1\004\uffe1\015\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\024\uffe1\025\uffe1\026\uffe1\057\uffe1\062" +
    "\uffe1\065\uffe1\001\002\000\004\022\145\001\002\000\004" +
    "\047\146\001\002\000\024\012\050\013\053\044\056\045" +
    "\057\047\060\057\055\060\047\061\054\064\051\001\002" +
    "\000\034\027\073\030\063\031\070\032\067\034\072\035" +
    "\075\036\071\037\066\040\074\041\064\042\076\043\065" +
    "\053\150\001\002\000\024\012\050\013\053\044\056\045" +
    "\057\047\060\057\055\060\047\061\054\064\051\001\002" +
    "\000\034\027\073\030\063\031\070\032\067\034\072\035" +
    "\075\036\071\037\066\040\074\041\064\042\076\043\065" +
    "\050\152\001\002\000\004\023\153\001\002\000\016\015" +
    "\013\021\022\024\004\026\010\057\011\062\017\001\002" +
    "\000\022\015\uffe3\017\uffe3\020\uffe3\021\uffe3\024\uffe3\026" +
    "\uffe3\057\uffe3\062\uffe3\001\002\000\020\015\013\020\157" +
    "\021\022\024\004\026\010\057\011\062\017\001\002\000" +
    "\022\015\uffe4\017\uffe4\020\uffe4\021\uffe4\024\uffe4\026\uffe4" +
    "\057\uffe4\062\uffe4\001\002\000\032\002\uffd7\004\uffd7\015" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\057\uffd7\062\uffd7\065\uffd7\001\002\000\024\012\050\013" +
    "\053\044\056\045\057\047\060\057\055\060\047\061\054" +
    "\064\051\001\002\000\034\027\073\030\063\031\070\032" +
    "\067\034\072\035\075\036\071\037\066\040\074\041\064" +
    "\042\076\043\065\055\uffdf\001\002\000\034\027\073\030" +
    "\063\031\070\032\067\034\072\035\075\036\071\037\066" +
    "\040\074\041\064\042\076\043\065\055\163\001\002\000" +
    "\032\002\uffe2\004\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\057\uffe2\062\uffe2\065\uffe2\001" +
    "\002\000\004\014\170\001\002\000\026\002\uffb6\004\uffb6" +
    "\015\uffb6\021\uffb6\024\uffb6\025\uffb6\026\uffb6\057\uffb6\062" +
    "\uffb6\065\uffb6\001\002\000\026\002\uffb8\004\uffb8\015\uffb8" +
    "\021\uffb8\024\uffb8\025\uffb8\026\uffb8\057\164\062\uffb8\065" +
    "\uffb8\001\002\000\026\002\uffb7\004\uffb7\015\uffb7\021\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\057\uffb7\062\uffb7\065\uffb7\001" +
    "\002\000\020\005\174\006\176\007\172\010\177\011\171" +
    "\057\175\063\173\001\002\000\004\004\025\001\002\000" +
    "\004\055\uffee\001\002\000\004\055\uffed\001\002\000\004" +
    "\055\ufff0\001\002\000\004\055\ufff1\001\002\000\004\055" +
    "\uffef\001\002\000\004\047\202\001\002\000\004\055\201" +
    "\001\002\000\026\002\uffb5\004\uffb5\015\uffb5\021\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\057\uffb5\062\uffb5\065\uffb5\001\002" +
    "\000\004\060\203\001\002\000\004\050\204\001\002\000" +
    "\020\005\174\006\176\007\172\010\177\011\171\057\175" +
    "\063\173\001\002\000\004\055\uffec\001\002\000\010\004" +
    "\025\020\207\051\134\001\002\000\004\055\ufff2\001\002" +
    "\000\024\012\050\013\053\044\056\045\057\047\060\057" +
    "\055\060\047\061\054\064\051\001\002\000\034\027\073" +
    "\030\063\031\070\032\067\034\072\035\075\036\071\037" +
    "\066\040\074\041\064\042\076\043\065\046\212\001\002" +
    "\000\004\016\213\001\002\000\016\015\013\021\022\024" +
    "\004\026\010\057\011\062\017\001\002\000\022\015\013" +
    "\017\215\020\216\021\022\024\004\026\010\057\011\062" +
    "\017\001\002\000\016\015\013\021\022\024\004\026\010" +
    "\057\011\062\017\001\002\000\032\002\uffd9\004\uffd9\015" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\057\uffd9\062\uffd9\065\uffd9\001\002\000\020\015\013\020" +
    "\220\021\022\024\004\026\010\057\011\062\017\001\002" +
    "\000\032\002\uffda\004\uffda\015\uffda\017\uffda\020\uffda\021" +
    "\uffda\024\uffda\025\uffda\026\uffda\057\uffda\062\uffda\065\uffda" +
    "\001\002\000\034\027\073\030\063\031\070\032\067\034" +
    "\072\035\075\036\071\037\066\040\074\041\064\042\076" +
    "\043\065\055\uffde\001\002\000\026\002\uffff\004\uffff\015" +
    "\uffff\021\uffff\024\uffff\025\uffff\026\uffff\057\uffff\062\uffff" +
    "\065\uffff\001\002\000\026\002\ufffc\004\ufffc\015\ufffc\021" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\057\ufffc\062\ufffc\065\ufffc" +
    "\001\002\000\004\045\225\001\002\000\006\046\227\057" +
    "\230\001\002\000\006\046\242\051\241\001\002\000\004" +
    "\054\234\001\002\000\004\054\232\001\002\000\006\046" +
    "\uffba\051\uffba\001\002\000\020\005\035\006\037\007\032" +
    "\010\040\011\031\057\036\063\033\001\002\000\006\046" +
    "\uffb9\051\uffb9\001\002\000\020\005\035\006\037\007\032" +
    "\010\040\011\031\057\036\063\033\001\002\000\004\014" +
    "\236\001\002\000\016\015\013\021\022\024\004\026\010" +
    "\057\011\062\017\001\002\000\020\015\013\020\240\021" +
    "\022\024\004\026\010\057\011\062\017\001\002\000\026" +
    "\002\uffbc\004\uffbc\015\uffbc\021\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\057\uffbc\062\uffbc\065\uffbc\001\002\000\004\057\230" +
    "\001\002\000\004\054\243\001\002\000\020\005\035\006" +
    "\037\007\032\010\040\011\031\057\036\063\033\001\002" +
    "\000\004\014\245\001\002\000\016\015\013\021\022\024" +
    "\004\026\010\057\011\062\017\001\002\000\020\015\013" +
    "\020\247\021\022\024\004\026\010\057\011\062\017\001" +
    "\002\000\026\002\uffbd\004\uffbd\015\uffbd\021\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\057\uffbd\062\uffbd\065\uffbd\001\002\000" +
    "\006\046\uffbb\051\uffbb\001\002\000\024\012\050\013\053" +
    "\044\056\045\057\047\060\057\055\060\047\061\054\064" +
    "\051\001\002\000\034\027\073\030\063\031\070\032\067" +
    "\034\072\035\075\036\071\037\066\040\074\041\064\042" +
    "\076\043\065\046\253\001\002\000\004\023\254\001\002" +
    "\000\016\015\013\021\022\024\004\026\010\057\011\062" +
    "\017\001\002\000\020\015\013\020\256\021\022\024\004" +
    "\026\010\057\011\062\017\001\002\000\032\002\uffd8\004" +
    "\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\057\uffd8\062\uffd8\065\uffd8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\026\002\023\003\006\004\015\005\005\007" +
    "\020\011\022\012\025\015\011\016\017\022\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\221\005\005\007\020\011\022\012\025\015\011" +
    "\016\017\022\014\001\001\000\006\013\220\016\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\164\024\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\161\016\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\033\001\001\000\006\005" +
    "\131\017\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\043\001\001\000\002\001\001\000" +
    "\006\013\051\016\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\117\016\045\001\001\000\006\013\115\016" +
    "\045\001\001\000\010\013\061\014\060\016\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\111\016" +
    "\045\001\001\000\006\013\110\016\045\001\001\000\006" +
    "\013\107\016\045\001\001\000\006\013\106\016\045\001" +
    "\001\000\006\013\105\016\045\001\001\000\006\013\104" +
    "\016\045\001\001\000\006\013\103\016\045\001\001\000" +
    "\006\013\102\016\045\001\001\000\006\013\101\016\045" +
    "\001\001\000\006\013\100\016\045\001\001\000\006\013" +
    "\077\016\045\001\001\000\006\013\076\016\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\114" +
    "\016\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\061\014\121\016\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\127\016\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\134" +
    "\001\001\000\004\005\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\146\016\045\001\001" +
    "\000\002\001\001\000\006\013\150\016\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\153\010\154" +
    "\011\022\012\025\016\017\001\001\000\002\001\001\000" +
    "\012\007\155\011\022\012\025\016\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\160\016\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\166\001" +
    "\001\000\002\001\001\000\004\025\177\001\001\000\006" +
    "\005\131\017\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\204\001\001" +
    "\000\002\001\001\000\004\005\134\001\001\000\002\001" +
    "\001\000\006\013\210\016\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\153\010\213\011\022\012" +
    "\025\016\017\001\001\000\012\007\155\011\022\012\025" +
    "\016\017\001\001\000\014\007\153\010\216\011\022\012" +
    "\025\016\017\001\001\000\002\001\001\000\012\007\155" +
    "\011\022\012\025\016\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\225\021\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\232\001\001\000\002\001\001\000\004\006" +
    "\234\001\001\000\002\001\001\000\014\007\153\010\236" +
    "\011\022\012\025\016\017\001\001\000\012\007\155\011" +
    "\022\012\025\016\017\001\001\000\002\001\001\000\004" +
    "\021\247\001\001\000\002\001\001\000\004\006\243\001" +
    "\001\000\002\001\001\000\014\007\153\010\245\011\022" +
    "\012\025\016\017\001\001\000\012\007\155\011\022\012" +
    "\025\016\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\251\016\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\153\010\254\011\022\012\025" +
    "\016\017\001\001\000\012\007\155\011\022\012\025\016" +
    "\017\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ProgramElements 
            { parser.Tree.reduce(1,"Program",0);
              ProgramNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ASTNode> e = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramElements ::= ProgramElements ProgramElement 
            { parser.Tree.reduce(2,"ProgramElements",1);
              List<ASTNode> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ASTNode> e1 = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 e1.add(e2); RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramElements",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramElements ::= ProgramElement 
            { parser.Tree.reduce(1,"ProgramElements",1);
              List<ASTNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramElements",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgramElement ::= TypeDeclaration 
            { parser.Tree.reduce(1,"ProgramElement",0);
              ASTNode RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeDeclarationListNode td = (TypeDeclarationListNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = td; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramElement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramElement ::= Declaration SEMICOLON 
            { parser.Tree.reduce(2,"ProgramElement",0);
              ASTNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationNode d = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramElement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgramElement ::= Statement 
            { parser.Tree.reduce(1,"ProgramElement",0);
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramElement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ProgramElement ::= Function 
            { parser.Tree.reduce(1,"ProgramElement",0);
              ASTNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionNode f = (FunctionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramElement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= IDENTIFIER 
            { parser.Tree.reduce(1,"Type",0);
              TypeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeIdentifierNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INTEGER_TYPE 
            { parser.Tree.reduce(1,"Type",0);
              TypeNode RESULT =null;
		 RESULT = new IntegerTypeNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOLEAN_TYPE 
            { parser.Tree.reduce(1,"Type",0);
              TypeNode RESULT =null;
		 RESULT = new BooleanTypeNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= REAL_TYPE 
            { parser.Tree.reduce(1,"Type",0);
              TypeNode RESULT =null;
		 RESULT = new RealTypeNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= STRING_TYPE 
            { parser.Tree.reduce(1,"Type",0);
              TypeNode RESULT =null;
		 RESULT = new StringTypeNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= ARRAY LBRACKET NUMBER RBRACKET Type 
            { parser.Tree.reduce(5,"Type",0);
              TypeNode RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elementTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elementTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeNode elementType = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayTypeNode(size, elementType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= RECORD DeclarationList END 
            { parser.Tree.reduce(3,"Type",0);
              TypeNode RESULT =null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<DeclarationNode> fields = (List<DeclarationNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordTypeNode(fields); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeDefinition ::= RECORD DeclarationList END 
            { parser.Tree.reduce(3,"TypeDefinition",0);
              TypeNode RESULT =null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<DeclarationNode> fields = (List<DeclarationNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordTypeNode(fields); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDefinition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypeDefinition ::= IDENTIFIER 
            { parser.Tree.reduce(1,"TypeDefinition",0);
              TypeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeIdentifierNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDefinition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TypeDefinition ::= INTEGER_TYPE 
            { parser.Tree.reduce(1,"TypeDefinition",0);
              TypeNode RESULT =null;
		 RESULT = new IntegerTypeNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDefinition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TypeDefinition ::= BOOLEAN_TYPE 
            { parser.Tree.reduce(1,"TypeDefinition",0);
              TypeNode RESULT =null;
		 RESULT = new BooleanTypeNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDefinition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypeDefinition ::= REAL_TYPE 
            { parser.Tree.reduce(1,"TypeDefinition",0);
              TypeNode RESULT =null;
		 RESULT = new RealTypeNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDefinition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypeDefinition ::= STRING_TYPE 
            { parser.Tree.reduce(1,"TypeDefinition",0);
              TypeNode RESULT =null;
		 RESULT = new StringTypeNode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDefinition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TypeDefinition ::= ARRAY LBRACKET NUMBER RBRACKET TypeDefinition 
            { parser.Tree.reduce(5,"TypeDefinition",0);
              TypeNode RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elementTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elementTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeNode elementType = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayTypeNode(size, elementType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDefinition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Declaration ::= VAR IDENTIFIER COLON Type IS Expression 
            { parser.Tree.reduce(6,"Declaration",0);
              DeclarationNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeNode type = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclarationNode(id, type, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Declaration ::= VAR IDENTIFIER COLON Type 
            { parser.Tree.reduce(4,"Declaration",0);
              DeclarationNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeNode type = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclarationNode(id, type, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DeclarationList ::= DeclarationList Declaration SEMICOLON 
            { parser.Tree.reduce(3,"DeclarationList",0);
              List<DeclarationNode> RESULT =null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<DeclarationNode> fields = (List<DeclarationNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationNode d = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 fields.add(d); RESULT = fields; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DeclarationList ::= Declaration SEMICOLON 
            { parser.Tree.reduce(2,"DeclarationList",0);
              List<DeclarationNode> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationNode d = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayList<>(Arrays.asList(d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DeclarationList ::= DeclarationList Declaration 
            { parser.Tree.reduce(2,"DeclarationList",0);
              List<DeclarationNode> RESULT =null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<DeclarationNode> fields = (List<DeclarationNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationNode d = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fields.add(d); RESULT = fields; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DeclarationList ::= DeclarationList COMMA Declaration 
            { parser.Tree.reduce(3,"DeclarationList",0);
              List<DeclarationNode> RESULT =null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<DeclarationNode> fields = (List<DeclarationNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationNode d = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fields.add(d); RESULT = fields; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DeclarationList ::= Declaration 
            { parser.Tree.reduce(1,"DeclarationList",0);
              List<DeclarationNode> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationNode d = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // StatementBlock ::= StatementBlock Statement 
            { parser.Tree.reduce(2,"StatementBlock",0);
              StatementBlockNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBlockNode s1 = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementNode s2 = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s1.getStatements().add(s2); RESULT = s1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementBlock",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StatementBlock ::= Statement 
            { parser.Tree.reduce(1,"StatementBlock",0);
              StatementBlockNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StatementBlockNode(new ArrayList<>(Arrays.asList(s))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementBlock",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= PRINT Expression SEMICOLON 
            { parser.Tree.reduce(3,"Statement",0);
              StatementNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PrintNode(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= SimpleStatement SEMICOLON 
            { parser.Tree.reduce(2,"Statement",0);
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= CompoundStatement 
            { parser.Tree.reduce(1,"Statement",0);
              StatementNode RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementNode cs = (StatementNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SimpleStatement ::= Variable ASSIGN Expression 
            { parser.Tree.reduce(3,"SimpleStatement",0);
              StatementNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode s1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignmentNode(s1, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SimpleStatement ::= RETURN Expression 
            { parser.Tree.reduce(2,"SimpleStatement",0);
              StatementNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnNode(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Variable ::= Variable DOT IDENTIFIER 
            { parser.Tree.reduce(3,"Variable",0);
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldAccessNode(v, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Variable ::= Variable LBRACKET Expression RBRACKET 
            { parser.Tree.reduce(4,"Variable",0);
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode index = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAccessNode(v, index); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Variable ::= IDENTIFIER 
            { parser.Tree.reduce(1,"Variable",0);
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CompoundStatement ::= IF LPAREN Expression RPAREN THEN StatementBlock ELSE StatementBlock END 
            { parser.Tree.reduce(9,"CompoundStatement",0);
              StatementNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExpressionNode cond = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int thenStmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int thenStmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementBlockNode thenStmt = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseStmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseStmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBlockNode elseStmt = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseNode(cond, thenStmt, elseStmt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompoundStatement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CompoundStatement ::= IF LPAREN Expression RPAREN THEN StatementBlock END 
            { parser.Tree.reduce(7,"CompoundStatement",0);
              StatementNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode cond = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int thenStmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int thenStmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBlockNode thenStmt = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseNode(cond, thenStmt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompoundStatement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CompoundStatement ::= WHILE LPAREN Expression RPAREN LOOP StatementBlock END 
            { parser.Tree.reduce(7,"CompoundStatement",0);
              StatementNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode cond = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBlockNode body = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileLoopNode(cond, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompoundStatement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CompoundStatement ::= FOR IDENTIFIER IN LBRACKET Expression RANGE Expression RBRACKET LOOP StatementBlock END 
            { parser.Tree.reduce(11,"CompoundStatement",0);
              StatementNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExpressionNode start = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode end = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBlockNode body = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ForLoopNode(new IdentifierNode(id), start, end, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompoundStatement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= STRING_LITERAL 
            { parser.Tree.reduce(1,"Expression",0);
              ExpressionNode RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringNode(str); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= IDENTIFIER LPAREN ExpressionList RPAREN 
            { parser.Tree.reduce(4,"Expression",0);
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ExpressionNode> args = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCallNode(id, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= IDENTIFIER LPAREN RPAREN 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunctionCallNode(id, new ArrayList<>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= Expression PLUS Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= Expression MINUS Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= Expression AND Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "AND"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expression ::= Expression OR Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "OR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expression ::= Expression XOR Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "XOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expression ::= Expression MULTIPLY Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expression ::= Expression DIVIDE Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expression ::= Expression EQUAL Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expression ::= Expression GREATER_THAN Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, ">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expression ::= Expression LESS_THAN Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(left, right, "<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expression ::= Expression GREATER_THAN_OR_EQUAL Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(new BinaryOpNode(left, right, ">"), new BinaryOpNode(left, right, "=="), "OR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expression ::= Expression LESS_THAN_OR_EQUAL Expression 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOpNode(new BinaryOpNode(left, right, "<"), new BinaryOpNode(left, right, "=="), "OR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expression ::= NOT Expression 
            { parser.Tree.reduce(2,"Expression",0);
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOpNode(expr, "NOT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expression ::= TRUE 
            { parser.Tree.reduce(1,"Expression",0);
              ExpressionNode RESULT =null;
		 RESULT = new BooleanNode(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expression ::= FALSE 
            { parser.Tree.reduce(1,"Expression",0);
              ExpressionNode RESULT =null;
		 RESULT = new BooleanNode(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expression ::= NUMBER 
            { parser.Tree.reduce(1,"Expression",0);
              ExpressionNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumberNode(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expression ::= REAL 
            { parser.Tree.reduce(1,"Expression",0);
              ExpressionNode RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double real = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RealNode(real); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expression ::= Variable 
            { parser.Tree.reduce(1,"Expression",0);
              ExpressionNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode v = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expression ::= LPAREN Expression RPAREN 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expression ::= LBRACKET ExpressionList RBRACKET 
            { parser.Tree.reduce(3,"Expression",0);
              ExpressionNode RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ExpressionNode> list = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpressionListNode(list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExpressionList ::= ExpressionList COMMA Expression 
            { parser.Tree.reduce(3,"ExpressionList",0);
              List<ExpressionNode> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ExpressionNode> el = (List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 el.add(expr); RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExpressionList ::= Expression 
            { parser.Tree.reduce(1,"ExpressionList",0);
              List<ExpressionNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Function ::= ROUTINE IDENTIFIER LPAREN ParameterList RPAREN COLON Type IS StatementBlock END 
            { parser.Tree.reduce(10,"Function",0);
              FunctionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		List<DeclarationNode> params = (List<DeclarationNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeNode returnType = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBlockNode body = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionNode(id, params, returnType, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Function ::= ROUTINE IDENTIFIER LPAREN RPAREN COLON Type IS StatementBlock END 
            { parser.Tree.reduce(9,"Function",0);
              FunctionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeNode returnType = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementBlockNode body = (StatementBlockNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionNode(id, new ArrayList<>(), returnType, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ParameterList ::= ParameterList COMMA Parameter 
            { parser.Tree.reduce(3,"ParameterList",0);
              List<DeclarationNode> RESULT =null;
		int plistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<DeclarationNode> plist = (List<DeclarationNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationNode param = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 plist.add(param); RESULT = plist; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ParameterList ::= Parameter 
            { parser.Tree.reduce(1,"ParameterList",0);
              List<DeclarationNode> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationNode param = (DeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(param)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Parameter ::= IDENTIFIER COLON Type 
            { parser.Tree.reduce(3,"Parameter",0);
              DeclarationNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeNode type = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclarationNode(id, type, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameter",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TypeDeclaration ::= TYPE TypeDeclarationList 
            { parser.Tree.reduce(2,"TypeDeclaration",0);
              TypeDeclarationListNode RESULT =null;
		int tdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeDeclarationListNode tdList = (TypeDeclarationListNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tdList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TypeDeclarationList ::= TypeDeclarationList TypeDeclarationItem 
            { parser.Tree.reduce(2,"TypeDeclarationList",0);
              TypeDeclarationListNode RESULT =null;
		int tdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeDeclarationListNode tds = (TypeDeclarationListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeDeclarationNode td = (TypeDeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tds.getTypeDeclarations().add(td); RESULT = tds; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclarationList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TypeDeclarationList ::= TypeDeclarationItem 
            { parser.Tree.reduce(1,"TypeDeclarationList",0);
              TypeDeclarationListNode RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeDeclarationNode td = (TypeDeclarationNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeDeclarationListNode(new ArrayList<>(Arrays.asList(td))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclarationList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TypeDeclarationItem ::= IDENTIFIER IS TypeDefinition SEMICOLON 
            { parser.Tree.reduce(4,"TypeDeclarationItem",0);
              TypeDeclarationNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeDefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeDefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeNode typeDef = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TypeDeclarationNode(id, typeDef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclarationItem",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
