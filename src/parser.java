
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\003\010\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\007\000" +
    "\002\006\005\000\002\004\005\000\002\004\011\000\002" +
    "\004\007\000\002\004\013\000\002\004\004\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\004\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\005\000\002\007\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\020\004\011\015\012\021\007\024\004\025" +
    "\016\026\015\054\014\001\002\000\020\012\030\013\034" +
    "\042\027\043\036\054\035\055\032\056\031\001\002\000" +
    "\004\002\123\001\002\000\004\053\122\001\002\000\004" +
    "\054\112\001\002\000\004\053\111\001\002\000\004\054" +
    "\071\001\002\000\020\012\030\013\034\042\027\043\036" +
    "\054\035\055\032\056\031\001\002\000\004\053\062\001" +
    "\002\000\004\033\060\001\002\000\020\012\030\013\034" +
    "\042\027\043\036\054\035\055\032\056\031\001\002\000" +
    "\004\054\017\001\002\000\004\043\020\001\002\000\004" +
    "\044\021\001\002\000\004\014\022\001\002\000\004\004" +
    "\011\001\002\000\004\053\024\001\002\000\014\015\012" +
    "\021\007\024\004\026\015\054\014\001\002\000\004\020" +
    "\026\001\002\000\004\053\uffe4\001\002\000\020\012\030" +
    "\013\034\042\027\043\036\054\035\055\032\056\031\001" +
    "\002\000\036\016\uffea\017\uffea\020\uffea\023\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\034\uffea\035\uffea\036\uffea\044" +
    "\uffea\051\uffea\053\uffea\001\002\000\036\016\uffe7\017\uffe7" +
    "\020\uffe7\023\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\044\uffe7\051\uffe7\053\uffe7\001\002" +
    "\000\036\016\uffe8\017\uffe8\020\uffe8\023\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8\036\uffe8\044\uffe8" +
    "\051\uffe8\053\uffe8\001\002\000\026\017\ufff3\020\ufff3\027" +
    "\043\030\045\031\047\032\046\034\044\035\042\036\041" +
    "\053\ufff3\001\002\000\036\016\uffe9\017\uffe9\020\uffe9\023" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\044\uffe9\051\uffe9\053\uffe9\001\002\000\036\016" +
    "\uffe6\017\uffe6\020\uffe6\023\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\034\uffe6\035\uffe6\036\uffe6\044\uffe6\051\uffe6\053" +
    "\uffe6\001\002\000\020\012\030\013\034\042\027\043\036" +
    "\054\035\055\032\056\031\001\002\000\022\027\043\030" +
    "\045\031\047\032\046\034\044\035\042\036\041\044\040" +
    "\001\002\000\036\016\uffe5\017\uffe5\020\uffe5\023\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\044\uffe5\051\uffe5\053\uffe5\001\002\000\020\012\030\013" +
    "\034\042\027\043\036\054\035\055\032\056\031\001\002" +
    "\000\020\012\030\013\034\042\027\043\036\054\035\055" +
    "\032\056\031\001\002\000\020\012\030\013\034\042\027" +
    "\043\036\054\035\055\032\056\031\001\002\000\020\012" +
    "\030\013\034\042\027\043\036\054\035\055\032\056\031" +
    "\001\002\000\020\012\030\013\034\042\027\043\036\054" +
    "\035\055\032\056\031\001\002\000\020\012\030\013\034" +
    "\042\027\043\036\054\035\055\032\056\031\001\002\000" +
    "\020\012\030\013\034\042\027\043\036\054\035\055\032" +
    "\056\031\001\002\000\036\016\ufff0\017\ufff0\020\ufff0\023" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\044\ufff0\051\ufff0\053\ufff0\001\002\000\036\016" +
    "\uffef\017\uffef\020\uffef\023\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\034\uffef\035\uffef\036\uffef\044\uffef\051\uffef\053" +
    "\uffef\001\002\000\036\016\ufff1\017\ufff1\020\ufff1\023\ufff1" +
    "\027\ufff1\030\ufff1\031\047\032\046\034\ufff1\035\ufff1\036" +
    "\ufff1\044\ufff1\051\ufff1\053\ufff1\001\002\000\036\016\uffee" +
    "\017\uffee\020\uffee\023\uffee\027\043\030\045\031\047\032" +
    "\046\034\uffee\035\uffee\036\uffee\044\uffee\051\uffee\053\uffee" +
    "\001\002\000\036\016\ufff2\017\ufff2\020\ufff2\023\ufff2\027" +
    "\ufff2\030\ufff2\031\047\032\046\034\ufff2\035\ufff2\036\ufff2" +
    "\044\ufff2\051\ufff2\053\ufff2\001\002\000\036\016\uffed\017" +
    "\uffed\020\uffed\023\uffed\027\043\030\045\031\047\032\046" +
    "\034\uffed\035\uffed\036\uffed\044\uffed\051\uffed\053\uffed\001" +
    "\002\000\036\016\uffec\017\uffec\020\uffec\023\uffec\027\043" +
    "\030\045\031\047\032\046\034\uffec\035\uffec\036\uffec\044" +
    "\uffec\051\uffec\053\uffec\001\002\000\036\016\uffeb\017\uffeb" +
    "\020\uffeb\023\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\044\uffeb\051\uffeb\053\uffeb\001\002" +
    "\000\020\012\030\013\034\042\027\043\036\054\035\055" +
    "\032\056\031\001\002\000\026\017\ufff7\020\ufff7\027\043" +
    "\030\045\031\047\032\046\034\044\035\042\036\041\053" +
    "\ufff7\001\002\000\004\002\uffff\001\002\000\022\016\064" +
    "\027\043\030\045\031\047\032\046\034\044\035\042\036" +
    "\041\001\002\000\014\015\012\021\007\024\004\026\015" +
    "\054\014\001\002\000\004\017\066\001\002\000\014\015" +
    "\012\021\007\024\004\026\015\054\014\001\002\000\004" +
    "\020\070\001\002\000\010\017\ufff6\020\ufff6\053\ufff6\001" +
    "\002\000\004\052\072\001\002\000\014\005\076\006\077" +
    "\007\074\010\100\011\073\001\002\000\004\004\011\001" +
    "\002\000\004\014\ufffa\001\002\000\004\014\105\001\002" +
    "\000\004\014\ufffc\001\002\000\004\014\ufffb\001\002\000" +
    "\004\045\101\001\002\000\004\055\102\001\002\000\004" +
    "\046\103\001\002\000\014\005\076\006\077\007\074\010" +
    "\100\011\073\001\002\000\004\014\ufff9\001\002\000\020" +
    "\012\030\013\034\042\027\043\036\054\035\055\032\056" +
    "\031\001\002\000\024\020\ufffd\027\043\030\045\031\047" +
    "\032\046\034\044\035\042\036\041\053\ufffd\001\002\000" +
    "\004\020\110\001\002\000\004\014\ufff8\001\002\000\004" +
    "\002\001\001\002\000\004\022\113\001\002\000\020\012" +
    "\030\013\034\042\027\043\036\054\035\055\032\056\031" +
    "\001\002\000\022\027\043\030\045\031\047\032\046\034" +
    "\044\035\042\036\041\051\115\001\002\000\020\012\030" +
    "\013\034\042\027\043\036\054\035\055\032\056\031\001" +
    "\002\000\022\023\117\027\043\030\045\031\047\032\046" +
    "\034\044\035\042\036\041\001\002\000\014\015\012\021" +
    "\007\024\004\026\015\054\014\001\002\000\004\020\121" +
    "\001\002\000\010\017\ufff4\020\ufff4\053\ufff4\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\000\001\002\000\022" +
    "\023\125\027\043\030\045\031\047\032\046\034\044\035" +
    "\042\036\041\001\002\000\014\015\012\021\007\024\004" +
    "\026\015\054\014\001\002\000\004\020\127\001\002\000" +
    "\010\017\ufff5\020\ufff5\053\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\012\002\004\003\007\004\012\007\005\001" +
    "\001\000\004\005\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\022\001\001\000\002\001\001\000\004\004\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\055\001\001\000\004\005\054\001\001" +
    "\000\004\005\053\001\001\000\004\005\052\001\001\000" +
    "\004\005\051\001\001\000\004\005\050\001\001\000\004" +
    "\005\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\064\001\001\000\002\001\001\000" +
    "\004\004\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\074\001\001\000\004\003" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\103\001\001\000\002" +
    "\001\001\000\004\005\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\113\001\001\000\002\001\001\000" +
    "\004\005\115\001\001\000\002\001\001\000\004\004\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\125" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Declaration SEMICOLON 
            { parser.Tree.reduce(2,"Program",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= Statement SEMICOLON 
            { parser.Tree.reduce(2,"Program",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= Function SEMICOLON 
            { parser.Tree.reduce(2,"Program",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaration ::= VAR IDENTIFIER COLON Type IS Expression 
            { parser.Tree.reduce(6,"Declaration",1);
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.println("Variable declaration: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Type ::= INTEGER_TYPE 
            { parser.Tree.reduce(1,"Type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Type ::= BOOLEAN_TYPE 
            { parser.Tree.reduce(1,"Type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= REAL_TYPE 
            { parser.Tree.reduce(1,"Type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= ARRAY LBRACKET NUMBER RBRACKET Type 
            { parser.Tree.reduce(5,"Type",0);
              Object RESULT =null;
		 System.out.println("Array type"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= RECORD Declaration END 
            { parser.Tree.reduce(3,"Type",0);
              Object RESULT =null;
		 System.out.println("Record type"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statement ::= IDENTIFIER ASSIGN Expression 
            { parser.Tree.reduce(3,"Statement",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= IF Expression THEN Statement ELSE Statement END 
            { parser.Tree.reduce(7,"Statement",0);
              Object RESULT =null;
		 System.out.println("If-else statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= WHILE Expression LOOP Statement END 
            { parser.Tree.reduce(5,"Statement",0);
              Object RESULT =null;
		 System.out.println("While loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= FOR IDENTIFIER IN Expression RANGE Expression LOOP Statement END 
            { parser.Tree.reduce(9,"Statement",0);
              Object RESULT =null;
		 System.out.println("For loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= RETURN Expression 
            { parser.Tree.reduce(2,"Statement",0);
              Object RESULT =null;
		 System.out.println("Return statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expression ::= Expression PLUS Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expression ::= Expression MINUS Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expression ::= Expression MULTIPLY Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expression ::= Expression DIVIDE Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expression ::= Expression EQUAL Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= Expression GREATER_THAN Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expression ::= Expression LESS_THAN Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expression ::= NOT Expression 
            { parser.Tree.reduce(2,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expression ::= TRUE 
            { parser.Tree.reduce(1,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expression ::= FALSE 
            { parser.Tree.reduce(1,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expression ::= NUMBER 
            { parser.Tree.reduce(1,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expression ::= REAL 
            { parser.Tree.reduce(1,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expression ::= IDENTIFIER 
            { parser.Tree.reduce(1,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expression ::= LPAREN Expression RPAREN 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Function ::= ROUTINE IDENTIFIER LPAREN RPAREN IS Declaration SEMICOLON Statement END 
            { parser.Tree.reduce(9,"Function",0);
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 System.out.println("Function definition: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
