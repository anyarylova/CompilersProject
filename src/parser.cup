/* parser.cup - Grammar specification for the custom language */
import java_cup.runtime.*;

terminal VAR, INTEGER_TYPE, BOOLEAN_TYPE, REAL_TYPE, ARRAY, RECORD, TRUE, FALSE, IS;
terminal IF, THEN, ELSE, END, FOR, IN, LOOP, WHILE, ROUTINE, RETURN;
terminal PLUS, MINUS, MULTIPLY, DIVIDE, ASSIGN, EQUAL, GREATER_THAN, LESS_THAN;
terminal AND, OR, XOR, NOT;
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, COMMA, DOT, RANGE, COLON, SEMICOLON;
terminal String IDENTIFIER;
terminal Integer NUMBER;
terminal Double REAL;

non terminal Program;
non terminal Declaration;
non terminal Statement;
non terminal Expression;
non terminal Type;
non terminal Function;
non terminal ProgramElements;
non terminal ProgramElement;
non terminal StatementBlock;
non terminal SimpleStatement;
non terminal CompoundStatement;
non terminal Variable;
non terminal ExpressionList;

precedence left OR, AND, XOR;
precedence left EQUAL, LESS_THAN, GREATER_THAN;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE;
precedence right NOT;

/* Grammar rules */
Program ::= ProgramElements;

ProgramElements ::= ProgramElements ProgramElement
                  | ProgramElement;

ProgramElement ::= Declaration SEMICOLON
                 | Statement
                 | Function;

Declaration ::= VAR IDENTIFIER:id COLON Type IS Expression
              {: System.out.println("Variable declaration: " + id); :};

Type ::= INTEGER_TYPE
       | BOOLEAN_TYPE
       | REAL_TYPE
       | ARRAY LBRACKET NUMBER RBRACKET Type
         {: System.out.println("Array type"); :}
       | RECORD Declaration END
         {: System.out.println("Record type"); :};

StatementBlock ::= Statement
                 | StatementBlock Statement;

Statement ::= SimpleStatement SEMICOLON
            | CompoundStatement;

SimpleStatement ::= Variable ASSIGN Expression
                  | RETURN Expression
                    {: System.out.println("Return statement"); :};

Variable ::= IDENTIFIER
           | Variable LBRACKET Expression RBRACKET;

CompoundStatement ::= IF LPAREN Expression RPAREN THEN StatementBlock ELSE StatementBlock END
                      {: System.out.println("If-else statement"); :}
                    | WHILE LPAREN Expression RPAREN LOOP StatementBlock END
                      {: System.out.println("While loop"); :}
                    | FOR IDENTIFIER IN LBRACKET Expression RANGE Expression RBRACKET LOOP StatementBlock END
                      {: System.out.println("For loop"); :};

Expression ::= Expression PLUS Expression
             | Expression MINUS Expression
             | Expression MULTIPLY Expression
             | Expression DIVIDE Expression
             | Expression EQUAL Expression
             | Expression GREATER_THAN Expression
             | Expression LESS_THAN Expression
             | NOT Expression
             | TRUE
             | FALSE
             | NUMBER
             | REAL
             | Variable
             | LPAREN Expression RPAREN
             | LBRACKET ExpressionList RBRACKET
             ;

ExpressionList ::= Expression
                 | ExpressionList COMMA Expression
                 ;

Function ::= ROUTINE IDENTIFIER:id LPAREN RPAREN IS Declaration SEMICOLON StatementBlock END
            {: System.out.println("Function definition: " + id); :};
