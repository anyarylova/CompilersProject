// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: lexical_spec.jflex

import java_cup.runtime.*;

/* JFlex definition for the custom language */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
<<<<<<< HEAD
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\1\0"+
    "\1\4\5\0\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\12\15\1\16\1\17\1\20\1\21\1\22"+
    "\2\0\32\23\1\24\1\0\1\25\3\0\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\2\23"+
    "\1\37\1\23\1\40\1\41\1\42\1\23\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\23\u0185\0";
=======
    "\11\0\1\1\1\2\2\0\1\1\22\0\1\1\7\0"+
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\12\13\1\14\1\15\1\16\1\17\1\20\2\0\32\21"+
    "\1\22\1\0\1\23\1\0\1\24\1\0\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\2\21"+
    "\1\36\1\21\1\37\1\40\1\41\1\21\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\21\u0185\0";
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
<<<<<<< HEAD
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\17\20\1\23\1\24\1\25"+
    "\1\26\1\27\7\20\1\30\1\31\1\32\2\20\1\33"+
    "\12\20\1\34\3\20\1\35\1\20\1\36\2\20\1\37"+
    "\11\20\1\40\1\20\1\41\2\20\1\42\2\20\1\43"+
    "\1\20\1\44\4\20\1\45\1\46\1\47\1\20\1\50"+
    "\1\20\1\51\1\20\1\52\4\20\1\53\2\20\1\54"+
    "\1\55\1\20\1\56\1\57\1\60\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[120];
=======
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\16\20\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\7\20\1\31\1\32\1\33\2\20\1\34"+
    "\10\20\1\35\3\20\1\36\1\20\1\37\2\20\1\40"+
    "\7\20\1\41\1\20\1\42\2\20\1\43\2\20\1\44"+
    "\1\20\1\45\3\20\1\46\1\47\1\20\1\50\1\20"+
    "\1\51\1\20\1\52\3\20\1\53\2\20\1\54\1\55"+
    "\1\20\1\56\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[111];
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
<<<<<<< HEAD
    "\0\0\0\53\0\126\0\201\0\201\0\201\0\201\0\201"+
    "\0\201\0\254\0\327\0\u0102\0\u012d\0\201\0\201\0\201"+
    "\0\201\0\u0158\0\201\0\201\0\u0183\0\u01ae\0\u01d9\0\u0204"+
    "\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c"+
    "\0\u0387\0\u03b2\0\u03dd\0\201\0\201\0\u0408\0\u0433\0\201"+
    "\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u0158"+
    "\0\u058b\0\u0158\0\u05b6\0\u05e1\0\u0158\0\u060c\0\u0637\0\u0662"+
    "\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u0158"+
    "\0\u07ba\0\u07e5\0\u0810\0\u0158\0\u083b\0\u0158\0\u0866\0\u0891"+
    "\0\u0158\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be"+
    "\0\u09e9\0\u0a14\0\u0158\0\u0a3f\0\u0158\0\u0a6a\0\u0a95\0\u0158"+
    "\0\u0ac0\0\u0aeb\0\u0158\0\u0b16\0\u0158\0\u0b41\0\u0b6c\0\u0b97"+
    "\0\u0bc2\0\u0158\0\u0158\0\u0158\0\u0bed\0\u0158\0\u0c18\0\u0158"+
    "\0\u0c43\0\u0158\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0158\0\u0d1a"+
    "\0\u0d45\0\u0158\0\u0158\0\u0d70\0\u0158\0\u0158\0\u0158\0\u0158";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[120];
=======
    "\0\0\0\52\0\124\0\124\0\124\0\124\0\124\0\124"+
    "\0\176\0\250\0\322\0\374\0\124\0\u0126\0\124\0\u0150"+
    "\0\u017a\0\124\0\124\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\124\0\u03f0\0\u041a\0\124\0\124\0\124\0\u0444"+
    "\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u017a\0\u056a"+
    "\0\u017a\0\u0594\0\u05be\0\u017a\0\u05e8\0\u0612\0\u063c\0\u0666"+
    "\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u017a\0\u0738\0\u0762\0\u078c"+
    "\0\u017a\0\u07b6\0\u017a\0\u07e0\0\u080a\0\u017a\0\u0834\0\u085e"+
    "\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u017a\0\u095a\0\u017a"+
    "\0\u0984\0\u09ae\0\u017a\0\u09d8\0\u0a02\0\u017a\0\u0a2c\0\u017a"+
    "\0\u0a56\0\u0a80\0\u0aaa\0\u017a\0\u017a\0\u0ad4\0\u017a\0\u0afe"+
    "\0\u017a\0\u0b28\0\u017a\0\u0b52\0\u0b7c\0\u0ba6\0\u017a\0\u0bd0"+
    "\0\u0bfa\0\u017a\0\u017a\0\u0c24\0\u017a\0\u017a\0\u017a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[111];
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\3\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
<<<<<<< HEAD
    "\1\21\1\22\1\23\1\24\1\25\1\26\2\22\1\27"+
    "\1\30\2\22\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\22\1\41\1\42\1\43\1\22\1\0"+
    "\3\2\47\0\2\3\2\0\1\44\46\3\66\0\1\45"+
    "\53\0\1\46\51\0\1\47\1\0\1\14\56\0\1\50"+
    "\46\0\1\22\5\0\1\22\2\0\25\22\15\0\1\22"+
    "\5\0\1\22\2\0\12\22\1\51\2\22\1\52\7\22"+
    "\15\0\1\22\5\0\1\22\2\0\13\22\1\53\11\22"+
    "\15\0\1\22\5\0\1\22\2\0\11\22\1\54\1\55"+
    "\12\22\15\0\1\22\5\0\1\22\2\0\1\56\12\22"+
    "\1\57\11\22\15\0\1\22\5\0\1\22\2\0\5\22"+
    "\1\60\4\22\1\61\3\22\1\62\6\22\15\0\1\22"+
    "\5\0\1\22\2\0\13\22\1\63\11\22\15\0\1\22"+
    "\5\0\1\22\2\0\13\22\1\64\11\22\15\0\1\22"+
    "\5\0\1\22\2\0\15\22\1\65\7\22\15\0\1\22"+
    "\5\0\1\22\2\0\15\22\1\66\7\22\15\0\1\22"+
    "\5\0\1\22\2\0\4\22\1\67\6\22\1\70\11\22"+
    "\15\0\1\22\5\0\1\22\2\0\17\22\1\71\5\22"+
    "\15\0\1\22\5\0\1\22\2\0\7\22\1\72\5\22"+
    "\1\73\6\22\1\74\15\0\1\22\5\0\1\22\2\0"+
    "\1\75\24\22\15\0\1\22\5\0\1\22\2\0\7\22"+
    "\1\76\15\22\15\0\1\22\5\0\1\22\2\0\13\22"+
    "\1\77\11\22\2\46\1\0\50\46\15\0\1\47\52\0"+
    "\1\22\5\0\1\22\2\0\3\22\1\100\21\22\15\0"+
    "\1\22\5\0\1\22\2\0\15\22\1\101\7\22\15\0"+
    "\1\22\5\0\1\22\2\0\13\22\1\102\11\22\15\0"+
    "\1\22\5\0\1\22\2\0\16\22\1\103\6\22\15\0"+
    "\1\22\5\0\1\22\2\0\3\22\1\104\21\22\15\0"+
    "\1\22\5\0\1\22\2\0\11\22\1\105\13\22\15\0"+
    "\1\22\5\0\1\22\2\0\15\22\1\106\7\22\15\0"+
    "\1\22\5\0\1\22\2\0\17\22\1\107\5\22\15\0"+
    "\1\22\5\0\1\22\2\0\13\22\1\110\11\22\15\0"+
    "\1\22\5\0\1\22\2\0\17\22\1\111\5\22\15\0"+
    "\1\22\5\0\1\22\2\0\10\22\1\112\14\22\15\0"+
    "\1\22\5\0\1\22\2\0\1\113\1\22\1\114\14\22"+
    "\1\115\5\22\15\0\1\22\5\0\1\22\2\0\20\22"+
    "\1\116\4\22\15\0\1\22\5\0\1\22\2\0\15\22"+
    "\1\117\7\22\15\0\1\22\5\0\1\22\2\0\4\22"+
    "\1\120\20\22\15\0\1\22\5\0\1\22\2\0\20\22"+
    "\1\121\4\22\15\0\1\22\5\0\1\22\2\0\14\22"+
    "\1\122\10\22\15\0\1\22\5\0\1\22\2\0\15\22"+
    "\1\123\7\22\15\0\1\22\5\0\1\22\2\0\10\22"+
    "\1\124\14\22\15\0\1\22\5\0\1\22\2\0\15\22"+
    "\1\125\7\22\15\0\1\22\5\0\1\22\2\0\1\126"+
    "\24\22\15\0\1\22\5\0\1\22\2\0\11\22\1\127"+
    "\13\22\15\0\1\22\5\0\1\22\2\0\4\22\1\130"+
    "\20\22\15\0\1\22\5\0\1\22\2\0\16\22\1\131"+
    "\6\22\15\0\1\22\5\0\1\22\2\0\4\22\1\132"+
    "\20\22\15\0\1\22\5\0\1\22\2\0\14\22\1\133"+
    "\10\22\15\0\1\22\5\0\1\22\2\0\12\22\1\134"+
    "\12\22\15\0\1\22\5\0\1\22\2\0\11\22\1\135"+
    "\13\22\15\0\1\22\5\0\1\22\2\0\13\22\1\136"+
    "\11\22\15\0\1\22\5\0\1\22\2\0\20\22\1\137"+
    "\4\22\15\0\1\22\5\0\1\22\2\0\17\22\1\140"+
    "\5\22\15\0\1\22\5\0\1\22\2\0\10\22\1\141"+
    "\14\22\15\0\1\22\5\0\1\22\2\0\12\22\1\142"+
    "\12\22\15\0\1\22\5\0\1\22\2\0\4\22\1\143"+
    "\20\22\15\0\1\22\5\0\1\22\2\0\4\22\1\144"+
    "\20\22\15\0\1\22\5\0\1\22\2\0\11\22\1\145"+
    "\13\22\15\0\1\22\5\0\1\22\2\0\24\22\1\146"+
    "\15\0\1\22\5\0\1\22\2\0\4\22\1\147\20\22"+
    "\15\0\1\22\5\0\1\22\2\0\4\22\1\150\20\22"+
    "\15\0\1\22\5\0\1\22\2\0\6\22\1\151\16\22"+
    "\15\0\1\22\5\0\1\22\2\0\17\22\1\152\5\22"+
    "\15\0\1\22\5\0\1\22\2\0\15\22\1\153\7\22"+
    "\15\0\1\22\5\0\1\22\2\0\15\22\1\154\7\22"+
    "\15\0\1\22\5\0\1\22\2\0\10\22\1\155\14\22"+
    "\15\0\1\22\5\0\1\22\2\0\12\22\1\156\12\22"+
    "\15\0\1\22\5\0\1\22\2\0\4\22\1\157\20\22"+
    "\15\0\1\22\5\0\1\22\2\0\1\160\24\22\15\0"+
    "\1\22\5\0\1\22\2\0\4\22\1\161\20\22\15\0"+
    "\1\22\5\0\1\22\2\0\3\22\1\162\21\22\15\0"+
    "\1\22\5\0\1\22\2\0\12\22\1\163\12\22\15\0"+
    "\1\22\5\0\1\22\2\0\12\22\1\164\12\22\15\0"+
    "\1\22\5\0\1\22\2\0\6\22\1\165\16\22\15\0"+
    "\1\22\5\0\1\22\2\0\12\22\1\166\12\22\15\0"+
    "\1\22\5\0\1\22\2\0\15\22\1\167\7\22\15\0"+
    "\1\22\5\0\1\22\2\0\4\22\1\170\20\22";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3483];
=======
    "\1\21\1\22\1\23\1\0\1\24\1\25\2\21\1\26"+
    "\1\27\2\21\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\21\1\36\1\21\1\37\1\40\1\41\1\21\1\0"+
    "\2\2\132\0\1\42\52\0\1\43\50\0\1\44\1\0"+
    "\1\13\55\0\1\45\51\0\1\46\51\0\1\47\45\0"+
    "\1\21\5\0\1\21\2\0\26\21\13\0\1\21\5\0"+
    "\1\21\2\0\13\21\1\50\2\21\1\51\7\21\13\0"+
    "\1\21\5\0\1\21\2\0\14\21\1\52\11\21\13\0"+
    "\1\21\5\0\1\21\2\0\12\21\1\53\1\54\12\21"+
    "\13\0\1\21\5\0\1\21\2\0\1\21\1\55\12\21"+
    "\1\56\11\21\13\0\1\21\5\0\1\21\2\0\6\21"+
    "\1\57\4\21\1\60\3\21\1\61\6\21\13\0\1\21"+
    "\5\0\1\21\2\0\14\21\1\62\11\21\13\0\1\21"+
    "\5\0\1\21\2\0\14\21\1\63\11\21\13\0\1\21"+
    "\5\0\1\21\2\0\16\21\1\64\7\21\13\0\1\21"+
    "\5\0\1\21\2\0\16\21\1\65\7\21\13\0\1\21"+
    "\5\0\1\21\2\0\5\21\1\66\6\21\1\67\11\21"+
    "\13\0\1\21\5\0\1\21\2\0\10\21\1\70\5\21"+
    "\1\71\7\21\13\0\1\21\5\0\1\21\2\0\1\21"+
    "\1\72\24\21\13\0\1\21\5\0\1\21\2\0\10\21"+
    "\1\73\15\21\13\0\1\21\5\0\1\21\2\0\14\21"+
    "\1\74\11\21\2\43\1\0\47\43\13\0\1\44\51\0"+
    "\1\21\5\0\1\21\2\0\4\21\1\75\21\21\13\0"+
    "\1\21\5\0\1\21\2\0\16\21\1\76\7\21\13\0"+
    "\1\21\5\0\1\21\2\0\14\21\1\77\11\21\13\0"+
    "\1\21\5\0\1\21\2\0\17\21\1\100\6\21\13\0"+
    "\1\21\5\0\1\21\2\0\4\21\1\101\21\21\13\0"+
    "\1\21\5\0\1\21\2\0\12\21\1\102\13\21\13\0"+
    "\1\21\5\0\1\21\2\0\16\21\1\103\7\21\13\0"+
    "\1\21\5\0\1\21\2\0\20\21\1\104\5\21\13\0"+
    "\1\21\5\0\1\21\2\0\14\21\1\105\11\21\13\0"+
    "\1\21\5\0\1\21\2\0\20\21\1\106\5\21\13\0"+
    "\1\21\5\0\1\21\2\0\11\21\1\107\14\21\13\0"+
    "\1\21\5\0\1\21\2\0\1\21\1\110\1\21\1\111"+
    "\14\21\1\112\5\21\13\0\1\21\5\0\1\21\2\0"+
    "\21\21\1\113\4\21\13\0\1\21\5\0\1\21\2\0"+
    "\5\21\1\114\20\21\13\0\1\21\5\0\1\21\2\0"+
    "\21\21\1\115\4\21\13\0\1\21\5\0\1\21\2\0"+
    "\16\21\1\116\7\21\13\0\1\21\5\0\1\21\2\0"+
    "\11\21\1\117\14\21\13\0\1\21\5\0\1\21\2\0"+
    "\16\21\1\120\7\21\13\0\1\21\5\0\1\21\2\0"+
    "\1\21\1\121\24\21\13\0\1\21\5\0\1\21\2\0"+
    "\12\21\1\122\13\21\13\0\1\21\5\0\1\21\2\0"+
    "\5\21\1\123\20\21\13\0\1\21\5\0\1\21\2\0"+
    "\17\21\1\124\6\21\13\0\1\21\5\0\1\21\2\0"+
    "\5\21\1\125\20\21\13\0\1\21\5\0\1\21\2\0"+
    "\15\21\1\126\10\21\13\0\1\21\5\0\1\21\2\0"+
    "\13\21\1\127\12\21\13\0\1\21\5\0\1\21\2\0"+
    "\12\21\1\130\13\21\13\0\1\21\5\0\1\21\2\0"+
    "\14\21\1\131\11\21\13\0\1\21\5\0\1\21\2\0"+
    "\21\21\1\132\4\21\13\0\1\21\5\0\1\21\2\0"+
    "\20\21\1\133\5\21\13\0\1\21\5\0\1\21\2\0"+
    "\13\21\1\134\12\21\13\0\1\21\5\0\1\21\2\0"+
    "\5\21\1\135\20\21\13\0\1\21\5\0\1\21\2\0"+
    "\12\21\1\136\13\21\13\0\1\21\5\0\1\21\2\0"+
    "\25\21\1\137\13\0\1\21\5\0\1\21\2\0\5\21"+
    "\1\140\20\21\13\0\1\21\5\0\1\21\2\0\5\21"+
    "\1\141\20\21\13\0\1\21\5\0\1\21\2\0\7\21"+
    "\1\142\16\21\13\0\1\21\5\0\1\21\2\0\20\21"+
    "\1\143\5\21\13\0\1\21\5\0\1\21\2\0\16\21"+
    "\1\144\7\21\13\0\1\21\5\0\1\21\2\0\16\21"+
    "\1\145\7\21\13\0\1\21\5\0\1\21\2\0\11\21"+
    "\1\146\14\21\13\0\1\21\5\0\1\21\2\0\5\21"+
    "\1\147\20\21\13\0\1\21\5\0\1\21\2\0\1\21"+
    "\1\150\24\21\13\0\1\21\5\0\1\21\2\0\5\21"+
    "\1\151\20\21\13\0\1\21\5\0\1\21\2\0\4\21"+
    "\1\152\21\21\13\0\1\21\5\0\1\21\2\0\13\21"+
    "\1\153\12\21\13\0\1\21\5\0\1\21\2\0\13\21"+
    "\1\154\12\21\13\0\1\21\5\0\1\21\2\0\13\21"+
    "\1\155\12\21\13\0\1\21\5\0\1\21\2\0\16\21"+
    "\1\156\7\21\13\0\1\21\5\0\1\21\2\0\5\21"+
    "\1\157\20\21";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3150];
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
<<<<<<< HEAD
    "\1\0\1\1\1\0\6\11\4\1\4\11\1\1\2\11"+
    "\17\1\2\11\2\1\1\11\120\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[120];
=======
    "\1\0\1\1\6\11\4\1\1\11\1\1\1\11\2\1"+
    "\2\11\16\1\1\11\2\1\3\11\110\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[111];
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  /* User code section for imports, variable declarations, etc. */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignore whitespaces */
            }
            // fall through
<<<<<<< HEAD
          case 50: break;
=======
          case 49: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 2:
            { System.out.println("OPEN PAREN"); return new Symbol(sym.LPAREN);
            }
            // fall through
<<<<<<< HEAD
          case 51: break;
=======
          case 50: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 3:
            { System.out.println("CLOSE PAREN"); return new Symbol(sym.RPAREN);
            }
            // fall through
<<<<<<< HEAD
          case 52: break;
=======
          case 51: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 4:
            { System.out.println("MULTIPLY"); return new Symbol(sym.MULTIPLY);
            }
            // fall through
<<<<<<< HEAD
          case 53: break;
=======
          case 52: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 5:
            { System.out.println("PLUS"); return new Symbol(sym.PLUS);
            }
            // fall through
<<<<<<< HEAD
          case 54: break;
=======
          case 53: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 6:
            { System.out.println("COMMA"); return new Symbol(sym.COMMA);
            }
            // fall through
<<<<<<< HEAD
          case 55: break;
=======
          case 54: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 7:
            { System.out.println("MINUS"); return new Symbol(sym.MINUS);
            }
            // fall through
<<<<<<< HEAD
          case 56: break;
=======
          case 55: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 8:
            { System.out.println("DOT"); return new Symbol(sym.DOT);
            }
            // fall through
<<<<<<< HEAD
          case 57: break;
=======
          case 56: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 9:
            { System.out.println("DIVIDE"); return new Symbol(sym.DIVIDE);
            }
            // fall through
<<<<<<< HEAD
          case 58: break;
=======
          case 57: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 10:
            { System.out.println("NUMBER: " + yytext()); return new Symbol(sym.NUMBER, Integer.parseInt(yytext()));
            }
            // fall through
<<<<<<< HEAD
          case 59: break;
=======
          case 58: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 11:
            { System.out.println("COLON"); return new Symbol(sym.COLON);
            }
            // fall through
<<<<<<< HEAD
          case 60: break;
=======
          case 59: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 12:
            { System.out.println("SEMICOLON"); return new Symbol(sym.SEMICOLON);
            }
            // fall through
<<<<<<< HEAD
          case 61: break;
=======
          case 60: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 13:
            { System.out.println("LESS_THAN"); return new Symbol(sym.LESS_THAN);
            }
            // fall through
<<<<<<< HEAD
          case 62: break;
=======
          case 61: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 14:
            { System.out.println("EQUAL"); return new Symbol(sym.EQUAL);
            }
            // fall through
<<<<<<< HEAD
          case 63: break;
=======
          case 62: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 15:
            { System.out.println("GREATER_THAN"); return new Symbol(sym.GREATER_THAN);
            }
            // fall through
<<<<<<< HEAD
          case 64: break;
=======
          case 63: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 16:
            { System.out.println("IDENTIFIER: " + yytext()); return new Symbol(sym.IDENTIFIER, yytext());
            }
            // fall through
<<<<<<< HEAD
          case 65: break;
=======
          case 64: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 17:
            { System.out.println("OPEN BRACKET"); return new Symbol(sym.LBRACKET);
            }
            // fall through
<<<<<<< HEAD
          case 66: break;
=======
          case 65: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 18:
            { System.out.println("CLOSE BRACKET"); return new Symbol(sym.RBRACKET);
            }
            // fall through
<<<<<<< HEAD
          case 67: break;
          case 19:
            { System.out.println("STRING_LITERAL: " + yytext()); return new Symbol(sym.STRING_LITERAL, yytext().substring(1, yytext().length()-1));
            }
            // fall through
          case 68: break;
          case 20:
            { System.out.println("RANGE"); return new Symbol(sym.RANGE);
            }
            // fall through
          case 69: break;
          case 21:
            { /* Ignore comments */
            }
            // fall through
          case 70: break;
          case 22:
            { System.out.println("REAL: " + yytext()); return new Symbol(sym.REAL, Double.parseDouble(yytext()));
            }
            // fall through
          case 71: break;
          case 23:
            { System.out.println("ASSIGN"); return new Symbol(sym.ASSIGN);
            }
            // fall through
          case 72: break;
          case 24:
=======
          case 66: break;
          case 19:
            { System.out.println("RANGE"); return new Symbol(sym.RANGE);
            }
            // fall through
          case 67: break;
          case 20:
            { /* Ignore comments */
            }
            // fall through
          case 68: break;
          case 21:
            { System.out.println("REAL: " + yytext()); return new Symbol(sym.REAL, Double.parseDouble(yytext()));
            }
            // fall through
          case 69: break;
          case 22:
            { System.out.println("ASSIGN"); return new Symbol(sym.ASSIGN);
            }
            // fall through
          case 70: break;
          case 23:
            { System.out.println("LESS_THAN_OR_EQUAL"); return new Symbol(sym.LESS_THAN_OR_EQUAL);
            }
            // fall through
          case 71: break;
          case 24:
            { System.out.println("GREATER_THAN_OR_EQUAL"); return new Symbol(sym.GREATER_THAN_OR_EQUAL);
            }
            // fall through
          case 72: break;
          case 25:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("IF"); return new Symbol(sym.IF);
            }
            // fall through
          case 73: break;
<<<<<<< HEAD
          case 25:
=======
          case 26:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("IN"); return new Symbol(sym.IN);
            }
            // fall through
          case 74: break;
<<<<<<< HEAD
          case 26:
=======
          case 27:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("IS"); return new Symbol(sym.IS);
            }
            // fall through
          case 75: break;
<<<<<<< HEAD
          case 27:
=======
          case 28:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("OR"); return new Symbol(sym.OR);
            }
            // fall through
          case 76: break;
<<<<<<< HEAD
          case 28:
=======
          case 29:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("AND"); return new Symbol(sym.AND);
            }
            // fall through
          case 77: break;
<<<<<<< HEAD
          case 29:
=======
          case 30:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("END"); return new Symbol(sym.END);
            }
            // fall through
          case 78: break;
<<<<<<< HEAD
          case 30:
=======
          case 31:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("FOR"); return new Symbol(sym.FOR);
            }
            // fall through
          case 79: break;
<<<<<<< HEAD
          case 31:
=======
          case 32:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("NOT"); return new Symbol(sym.NOT);
            }
            // fall through
          case 80: break;
<<<<<<< HEAD
          case 32:
=======
          case 33:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("VAR"); return new Symbol(sym.VAR);
            }
            // fall through
          case 81: break;
<<<<<<< HEAD
          case 33:
=======
          case 34:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("XOR"); return new Symbol(sym.XOR);
            }
            // fall through
          case 82: break;
<<<<<<< HEAD
          case 34:
=======
          case 35:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("ELSE"); return new Symbol(sym.ELSE);
            }
            // fall through
          case 83: break;
<<<<<<< HEAD
          case 35:
=======
          case 36:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("LOOP"); return new Symbol(sym.LOOP);
            }
            // fall through
          case 84: break;
<<<<<<< HEAD
          case 36:
=======
          case 37:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("REAL_TYPE"); return new Symbol(sym.REAL_TYPE);
            }
            // fall through
          case 85: break;
<<<<<<< HEAD
          case 37:
=======
          case 38:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("THEN"); return new Symbol(sym.THEN);
            }
            // fall through
          case 86: break;
<<<<<<< HEAD
          case 38:
=======
          case 39:
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
            { System.out.println("TRUE"); return new Symbol(sym.TRUE);
            }
            // fall through
          case 87: break;
<<<<<<< HEAD
          case 39:
            { System.out.println("TYPE"); return new Symbol(sym.TYPE);
            }
            // fall through
          case 88: break;
          case 40:
            { System.out.println("ARRAY"); return new Symbol(sym.ARRAY);
            }
            // fall through
          case 89: break;
          case 41:
            { System.out.println("FALSE"); return new Symbol(sym.FALSE);
            }
            // fall through
          case 90: break;
          case 42:
            { System.out.println("PRINT"); return new Symbol(sym.PRINT);
            }
            // fall through
          case 91: break;
          case 43:
            { System.out.println("WHILE"); return new Symbol(sym.WHILE);
            }
            // fall through
          case 92: break;
          case 44:
            { System.out.println("RECORD"); return new Symbol(sym.RECORD);
            }
            // fall through
          case 93: break;
=======
          case 40:
            { System.out.println("ARRAY"); return new Symbol(sym.ARRAY);
            }
            // fall through
          case 88: break;
          case 41:
            { System.out.println("FALSE"); return new Symbol(sym.FALSE);
            }
            // fall through
          case 89: break;
          case 42:
            { System.out.println("PRINT"); return new Symbol(sym.PRINT);
            }
            // fall through
          case 90: break;
          case 43:
            { System.out.println("WHILE"); return new Symbol(sym.WHILE);
            }
            // fall through
          case 91: break;
          case 44:
            { System.out.println("RECORD"); return new Symbol(sym.RECORD);
            }
            // fall through
          case 92: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          case 45:
            { System.out.println("RETURN"); return new Symbol(sym.RETURN);
            }
            // fall through
<<<<<<< HEAD
          case 94: break;
          case 46:
            { System.out.println("STRING_TYPE"); return new Symbol(sym.STRING_TYPE);
            }
            // fall through
          case 95: break;
          case 47:
            { System.out.println("BOOLEAN_TYPE"); return new Symbol(sym.BOOLEAN_TYPE);
            }
            // fall through
          case 96: break;
          case 48:
            { System.out.println("INTEGER_TYPE"); return new Symbol(sym.INTEGER_TYPE);
            }
            // fall through
          case 97: break;
          case 49:
            { System.out.println("ROUTINE"); return new Symbol(sym.ROUTINE);
            }
            // fall through
          case 98: break;
=======
          case 93: break;
          case 46:
            { System.out.println("BOOLEAN_TYPE"); return new Symbol(sym.BOOLEAN_TYPE);
            }
            // fall through
          case 94: break;
          case 47:
            { System.out.println("INTEGER_TYPE"); return new Symbol(sym.INTEGER_TYPE);
            }
            // fall through
          case 95: break;
          case 48:
            { System.out.println("ROUTINE"); return new Symbol(sym.ROUTINE);
            }
            // fall through
          case 96: break;
>>>>>>> 6900b8794abdd55f46ecc3902fa6ef9b64dc7f31
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
